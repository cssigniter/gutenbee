window["wp"] = window["wp"] || {}; window["wp"]["gutenbee.scripts"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/frontend.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/countup/dist/countUp.min.js":
/*!**************************************************!*\
  !*** ./node_modules/countup/dist/countUp.min.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(a,t){ true?!(__WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):undefined}(this,function(a,t,n){var e=function(a,t,n,e,i,r){for(var o=0,s=[\"webkit\",\"moz\",\"ms\",\"o\"],m=0;m<s.length&&!window.requestAnimationFrame;++m)window.requestAnimationFrame=window[s[m]+\"RequestAnimationFrame\"],window.cancelAnimationFrame=window[s[m]+\"CancelAnimationFrame\"]||window[s[m]+\"CancelRequestAnimationFrame\"];window.requestAnimationFrame||(window.requestAnimationFrame=function(a,t){var n=(new Date).getTime(),e=Math.max(0,16-(n-o)),i=window.setTimeout(function(){a(n+e)},e);return o=n+e,i}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(a){clearTimeout(a)});var u=this;u.options={useEasing:!0,useGrouping:!0,separator:\",\",decimal:\".\",easingFn:null,formattingFn:null};for(var l in r)r.hasOwnProperty(l)&&(u.options[l]=r[l]);\"\"===u.options.separator&&(u.options.useGrouping=!1),u.options.prefix||(u.options.prefix=\"\"),u.options.suffix||(u.options.suffix=\"\"),u.d=\"string\"==typeof a?document.getElementById(a):a,u.startVal=Number(t),u.endVal=Number(n),u.countDown=u.startVal>u.endVal,u.frameVal=u.startVal,u.decimals=Math.max(0,e||0),u.dec=Math.pow(10,u.decimals),u.duration=1e3*Number(i)||2e3,u.formatNumber=function(a){a=a.toFixed(u.decimals),a+=\"\";var t,n,e,i;if(t=a.split(\".\"),n=t[0],e=t.length>1?u.options.decimal+t[1]:\"\",i=/(\\d+)(\\d{3})/,u.options.useGrouping)for(;i.test(n);)n=n.replace(i,\"$1\"+u.options.separator+\"$2\");return u.options.prefix+n+e+u.options.suffix},u.easeOutExpo=function(a,t,n,e){return n*(-Math.pow(2,-10*a/e)+1)*1024/1023+t},u.easingFn=u.options.easingFn?u.options.easingFn:u.easeOutExpo,u.formattingFn=u.options.formattingFn?u.options.formattingFn:u.formatNumber,u.version=function(){return\"1.7.1\"},u.printValue=function(a){var t=u.formattingFn(a);\"INPUT\"===u.d.tagName?this.d.value=t:\"text\"===u.d.tagName||\"tspan\"===u.d.tagName?this.d.textContent=t:this.d.innerHTML=t},u.count=function(a){u.startTime||(u.startTime=a),u.timestamp=a;var t=a-u.startTime;u.remaining=u.duration-t,u.options.useEasing?u.countDown?u.frameVal=u.startVal-u.easingFn(t,0,u.startVal-u.endVal,u.duration):u.frameVal=u.easingFn(t,u.startVal,u.endVal-u.startVal,u.duration):u.countDown?u.frameVal=u.startVal-(u.startVal-u.endVal)*(t/u.duration):u.frameVal=u.startVal+(u.endVal-u.startVal)*(t/u.duration),u.countDown?u.frameVal=u.frameVal<u.endVal?u.endVal:u.frameVal:u.frameVal=u.frameVal>u.endVal?u.endVal:u.frameVal,u.frameVal=Math.round(u.frameVal*u.dec)/u.dec,u.printValue(u.frameVal),t<u.duration?u.rAF=requestAnimationFrame(u.count):u.callback&&u.callback()},u.start=function(a){return u.callback=a,u.rAF=requestAnimationFrame(u.count),!1},u.pauseResume=function(){u.paused?(u.paused=!1,delete u.startTime,u.duration=u.remaining,u.startVal=u.frameVal,requestAnimationFrame(u.count)):(u.paused=!0,cancelAnimationFrame(u.rAF))},u.reset=function(){u.paused=!1,delete u.startTime,u.startVal=t,cancelAnimationFrame(u.rAF),u.printValue(u.startVal)},u.update=function(a){cancelAnimationFrame(u.rAF),u.paused=!1,delete u.startTime,u.startVal=u.frameVal,u.endVal=Number(a),u.countDown=u.startVal>u.endVal,u.rAF=requestAnimationFrame(u.count)},u.printValue(u.startVal)};return e});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cC5bbmFtZV0vLi9ub2RlX21vZHVsZXMvY291bnR1cC9kaXN0L2NvdW50VXAubWluLmpzPzU3ZjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUZBQWU7QUFBQTtBQUFBO0FBQUE7QUFBQSwrR0FBZ0ksc0JBQXNCLDRCQUE0Qiw0Q0FBNEMsMENBQTBDLGtMQUFrTCwwRUFBMEUsaUZBQWlGLE9BQU8sSUFBSSxlQUFlLHdFQUF3RSxnQkFBZ0IsRUFBRSxXQUFXLFdBQVcsdUZBQXVGLHdEQUF3RCwwWUFBMFksOEJBQThCLFlBQVksNEVBQTRFLEVBQUUsOEJBQThCLFVBQVUsOENBQThDLDZDQUE2QyxpQ0FBaUMsOENBQThDLGlLQUFpSyxjQUFjLDBCQUEwQix3QkFBd0IseUhBQXlILHFCQUFxQiwyQ0FBMkMsb0JBQW9CLHVrQkFBdWtCLHFCQUFxQiw0REFBNEQsMEJBQTBCLGdLQUFnSyxvQkFBb0IsaUdBQWlHLHNCQUFzQix5S0FBeUssMkJBQTJCLFNBQVMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY291bnR1cC9kaXN0L2NvdW50VXAubWluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIWZ1bmN0aW9uKGEsdCl7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZSh0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz10KHJlcXVpcmUsZXhwb3J0cyxtb2R1bGUpOmEuQ291bnRVcD10KCl9KHRoaXMsZnVuY3Rpb24oYSx0LG4pe3ZhciBlPWZ1bmN0aW9uKGEsdCxuLGUsaSxyKXtmb3IodmFyIG89MCxzPVtcIndlYmtpdFwiLFwibW96XCIsXCJtc1wiLFwib1wiXSxtPTA7bTxzLmxlbmd0aCYmIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7KyttKXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU9d2luZG93W3NbbV0rXCJSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl0sd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lPXdpbmRvd1tzW21dK1wiQ2FuY2VsQW5pbWF0aW9uRnJhbWVcIl18fHdpbmRvd1tzW21dK1wiQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lXCJdO3dpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fCh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lPWZ1bmN0aW9uKGEsdCl7dmFyIG49KG5ldyBEYXRlKS5nZXRUaW1lKCksZT1NYXRoLm1heCgwLDE2LShuLW8pKSxpPXdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YShuK2UpfSxlKTtyZXR1cm4gbz1uK2UsaX0pLHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZXx8KHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZT1mdW5jdGlvbihhKXtjbGVhclRpbWVvdXQoYSl9KTt2YXIgdT10aGlzO3Uub3B0aW9ucz17dXNlRWFzaW5nOiEwLHVzZUdyb3VwaW5nOiEwLHNlcGFyYXRvcjpcIixcIixkZWNpbWFsOlwiLlwiLGVhc2luZ0ZuOm51bGwsZm9ybWF0dGluZ0ZuOm51bGx9O2Zvcih2YXIgbCBpbiByKXIuaGFzT3duUHJvcGVydHkobCkmJih1Lm9wdGlvbnNbbF09cltsXSk7XCJcIj09PXUub3B0aW9ucy5zZXBhcmF0b3ImJih1Lm9wdGlvbnMudXNlR3JvdXBpbmc9ITEpLHUub3B0aW9ucy5wcmVmaXh8fCh1Lm9wdGlvbnMucHJlZml4PVwiXCIpLHUub3B0aW9ucy5zdWZmaXh8fCh1Lm9wdGlvbnMuc3VmZml4PVwiXCIpLHUuZD1cInN0cmluZ1wiPT10eXBlb2YgYT9kb2N1bWVudC5nZXRFbGVtZW50QnlJZChhKTphLHUuc3RhcnRWYWw9TnVtYmVyKHQpLHUuZW5kVmFsPU51bWJlcihuKSx1LmNvdW50RG93bj11LnN0YXJ0VmFsPnUuZW5kVmFsLHUuZnJhbWVWYWw9dS5zdGFydFZhbCx1LmRlY2ltYWxzPU1hdGgubWF4KDAsZXx8MCksdS5kZWM9TWF0aC5wb3coMTAsdS5kZWNpbWFscyksdS5kdXJhdGlvbj0xZTMqTnVtYmVyKGkpfHwyZTMsdS5mb3JtYXROdW1iZXI9ZnVuY3Rpb24oYSl7YT1hLnRvRml4ZWQodS5kZWNpbWFscyksYSs9XCJcIjt2YXIgdCxuLGUsaTtpZih0PWEuc3BsaXQoXCIuXCIpLG49dFswXSxlPXQubGVuZ3RoPjE/dS5vcHRpb25zLmRlY2ltYWwrdFsxXTpcIlwiLGk9LyhcXGQrKShcXGR7M30pLyx1Lm9wdGlvbnMudXNlR3JvdXBpbmcpZm9yKDtpLnRlc3Qobik7KW49bi5yZXBsYWNlKGksXCIkMVwiK3Uub3B0aW9ucy5zZXBhcmF0b3IrXCIkMlwiKTtyZXR1cm4gdS5vcHRpb25zLnByZWZpeCtuK2UrdS5vcHRpb25zLnN1ZmZpeH0sdS5lYXNlT3V0RXhwbz1mdW5jdGlvbihhLHQsbixlKXtyZXR1cm4gbiooLU1hdGgucG93KDIsLTEwKmEvZSkrMSkqMTAyNC8xMDIzK3R9LHUuZWFzaW5nRm49dS5vcHRpb25zLmVhc2luZ0ZuP3Uub3B0aW9ucy5lYXNpbmdGbjp1LmVhc2VPdXRFeHBvLHUuZm9ybWF0dGluZ0ZuPXUub3B0aW9ucy5mb3JtYXR0aW5nRm4/dS5vcHRpb25zLmZvcm1hdHRpbmdGbjp1LmZvcm1hdE51bWJlcix1LnZlcnNpb249ZnVuY3Rpb24oKXtyZXR1cm5cIjEuNy4xXCJ9LHUucHJpbnRWYWx1ZT1mdW5jdGlvbihhKXt2YXIgdD11LmZvcm1hdHRpbmdGbihhKTtcIklOUFVUXCI9PT11LmQudGFnTmFtZT90aGlzLmQudmFsdWU9dDpcInRleHRcIj09PXUuZC50YWdOYW1lfHxcInRzcGFuXCI9PT11LmQudGFnTmFtZT90aGlzLmQudGV4dENvbnRlbnQ9dDp0aGlzLmQuaW5uZXJIVE1MPXR9LHUuY291bnQ9ZnVuY3Rpb24oYSl7dS5zdGFydFRpbWV8fCh1LnN0YXJ0VGltZT1hKSx1LnRpbWVzdGFtcD1hO3ZhciB0PWEtdS5zdGFydFRpbWU7dS5yZW1haW5pbmc9dS5kdXJhdGlvbi10LHUub3B0aW9ucy51c2VFYXNpbmc/dS5jb3VudERvd24/dS5mcmFtZVZhbD11LnN0YXJ0VmFsLXUuZWFzaW5nRm4odCwwLHUuc3RhcnRWYWwtdS5lbmRWYWwsdS5kdXJhdGlvbik6dS5mcmFtZVZhbD11LmVhc2luZ0ZuKHQsdS5zdGFydFZhbCx1LmVuZFZhbC11LnN0YXJ0VmFsLHUuZHVyYXRpb24pOnUuY291bnREb3duP3UuZnJhbWVWYWw9dS5zdGFydFZhbC0odS5zdGFydFZhbC11LmVuZFZhbCkqKHQvdS5kdXJhdGlvbik6dS5mcmFtZVZhbD11LnN0YXJ0VmFsKyh1LmVuZFZhbC11LnN0YXJ0VmFsKSoodC91LmR1cmF0aW9uKSx1LmNvdW50RG93bj91LmZyYW1lVmFsPXUuZnJhbWVWYWw8dS5lbmRWYWw/dS5lbmRWYWw6dS5mcmFtZVZhbDp1LmZyYW1lVmFsPXUuZnJhbWVWYWw+dS5lbmRWYWw/dS5lbmRWYWw6dS5mcmFtZVZhbCx1LmZyYW1lVmFsPU1hdGgucm91bmQodS5mcmFtZVZhbCp1LmRlYykvdS5kZWMsdS5wcmludFZhbHVlKHUuZnJhbWVWYWwpLHQ8dS5kdXJhdGlvbj91LnJBRj1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodS5jb3VudCk6dS5jYWxsYmFjayYmdS5jYWxsYmFjaygpfSx1LnN0YXJ0PWZ1bmN0aW9uKGEpe3JldHVybiB1LmNhbGxiYWNrPWEsdS5yQUY9cmVxdWVzdEFuaW1hdGlvbkZyYW1lKHUuY291bnQpLCExfSx1LnBhdXNlUmVzdW1lPWZ1bmN0aW9uKCl7dS5wYXVzZWQ/KHUucGF1c2VkPSExLGRlbGV0ZSB1LnN0YXJ0VGltZSx1LmR1cmF0aW9uPXUucmVtYWluaW5nLHUuc3RhcnRWYWw9dS5mcmFtZVZhbCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUodS5jb3VudCkpOih1LnBhdXNlZD0hMCxjYW5jZWxBbmltYXRpb25GcmFtZSh1LnJBRikpfSx1LnJlc2V0PWZ1bmN0aW9uKCl7dS5wYXVzZWQ9ITEsZGVsZXRlIHUuc3RhcnRUaW1lLHUuc3RhcnRWYWw9dCxjYW5jZWxBbmltYXRpb25GcmFtZSh1LnJBRiksdS5wcmludFZhbHVlKHUuc3RhcnRWYWwpfSx1LnVwZGF0ZT1mdW5jdGlvbihhKXtjYW5jZWxBbmltYXRpb25GcmFtZSh1LnJBRiksdS5wYXVzZWQ9ITEsZGVsZXRlIHUuc3RhcnRUaW1lLHUuc3RhcnRWYWw9dS5mcmFtZVZhbCx1LmVuZFZhbD1OdW1iZXIoYSksdS5jb3VudERvd249dS5zdGFydFZhbD51LmVuZFZhbCx1LnJBRj1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodS5jb3VudCl9LHUucHJpbnRWYWx1ZSh1LnN0YXJ0VmFsKX07cmV0dXJuIGV9KTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/countup/dist/countUp.min.js\n");

/***/ }),

/***/ "./node_modules/justifiedGallery/dist/js/jquery.justifiedGallery.js":
/*!**************************************************************************!*\
  !*** ./node_modules/justifiedGallery/dist/js/jquery.justifiedGallery.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * justifiedGallery - v3.7.0\n * http://miromannino.github.io/Justified-Gallery/\n * Copyright (c) 2018 Miro Mannino\n * Licensed under the MIT license.\n */\n(function (factory) {\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"jquery\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(function ($) {\n\n  /**\n   * Justified Gallery controller constructor\n   *\n   * @param $gallery the gallery to build\n   * @param settings the settings (the defaults are in JustifiedGallery.defaults)\n   * @constructor\n   */\n  var JustifiedGallery = function ($gallery, settings) {\n  \n    this.settings = settings;\n    this.checkSettings();\n  \n    this.imgAnalyzerTimeout = null;\n    this.entries = null;\n    this.buildingRow = {\n      entriesBuff : [],\n      width : 0,\n      height : 0,\n      aspectRatio : 0\n    };\n    this.lastFetchedEntry = null;\n    this.lastAnalyzedIndex = -1;\n    this.yield = {\n      every : 2, // do a flush every n flushes (must be greater than 1)\n      flushed : 0 // flushed rows without a yield\n    };\n    this.border = settings.border >= 0 ? settings.border : settings.margins;\n    this.maxRowHeight = this.retrieveMaxRowHeight();\n    this.suffixRanges = this.retrieveSuffixRanges();\n    this.offY = this.border;\n    this.rows = 0;\n    this.spinner = {\n      phase : 0,\n      timeSlot : 150,\n      $el : $('<div class=\"spinner\"><span></span><span></span><span></span></div>'),\n      intervalId : null\n    };\n    this.scrollBarOn = false;\n    this.checkWidthIntervalId = null;\n    this.galleryWidth = $gallery.width();\n    this.$gallery = $gallery;\n  \n  };\n  \n  /** @returns {String} the best suffix given the width and the height */\n  JustifiedGallery.prototype.getSuffix = function (width, height) {\n    var longestSide, i;\n    longestSide = (width > height) ? width : height;\n    for (i = 0; i < this.suffixRanges.length; i++) {\n      if (longestSide <= this.suffixRanges[i]) {\n        return this.settings.sizeRangeSuffixes[this.suffixRanges[i]];\n      }\n    }\n    return this.settings.sizeRangeSuffixes[this.suffixRanges[i - 1]];\n  };\n  \n  /**\n   * Remove the suffix from the string\n   *\n   * @returns {string} a new string without the suffix\n   */\n  JustifiedGallery.prototype.removeSuffix = function (str, suffix) {\n    return str.substring(0, str.length - suffix.length);\n  };\n  \n  /**\n   * @returns {boolean} a boolean to say if the suffix is contained in the str or not\n   */\n  JustifiedGallery.prototype.endsWith = function (str, suffix) {\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n  };\n  \n  /**\n   * Get the used suffix of a particular url\n   *\n   * @param str\n   * @returns {String} return the used suffix\n   */\n  JustifiedGallery.prototype.getUsedSuffix = function (str) {\n    for (var si in this.settings.sizeRangeSuffixes) {\n      if (this.settings.sizeRangeSuffixes.hasOwnProperty(si)) {\n        if (this.settings.sizeRangeSuffixes[si].length === 0) continue;\n        if (this.endsWith(str, this.settings.sizeRangeSuffixes[si])) return this.settings.sizeRangeSuffixes[si];\n      }\n    }\n    return '';\n  };\n  \n  /**\n   * Given an image src, with the width and the height, returns the new image src with the\n   * best suffix to show the best quality thumbnail.\n   *\n   * @returns {String} the suffix to use\n   */\n  JustifiedGallery.prototype.newSrc = function (imageSrc, imgWidth, imgHeight, image) {\n    var newImageSrc;\n  \n    if (this.settings.thumbnailPath) {\n      newImageSrc = this.settings.thumbnailPath(imageSrc, imgWidth, imgHeight, image);\n    } else {\n      var matchRes = imageSrc.match(this.settings.extension);\n      var ext = (matchRes !== null) ? matchRes[0] : '';\n      newImageSrc = imageSrc.replace(this.settings.extension, '');\n      newImageSrc = this.removeSuffix(newImageSrc, this.getUsedSuffix(newImageSrc));\n      newImageSrc += this.getSuffix(imgWidth, imgHeight) + ext;\n    }\n  \n    return newImageSrc;\n  };\n  \n  /**\n   * Shows the images that is in the given entry\n   *\n   * @param $entry the entry\n   * @param callback the callback that is called when the show animation is finished\n   */\n  JustifiedGallery.prototype.showImg = function ($entry, callback) {\n    if (this.settings.cssAnimation) {\n      $entry.addClass('entry-visible');\n      if (callback) callback();\n    } else {\n      $entry.stop().fadeTo(this.settings.imagesAnimationDuration, 1.0, callback);\n      $entry.find(this.settings.imgSelector).stop().fadeTo(this.settings.imagesAnimationDuration, 1.0, callback);\n    }\n  };\n  \n  /**\n   * Extract the image src form the image, looking from the 'safe-src', and if it can't be found, from the\n   * 'src' attribute. It saves in the image data the 'jg.originalSrc' field, with the extracted src.\n   *\n   * @param $image the image to analyze\n   * @returns {String} the extracted src\n   */\n  JustifiedGallery.prototype.extractImgSrcFromImage = function ($image) {\n    var imageSrc = (typeof $image.data('safe-src') !== 'undefined') ? $image.data('safe-src') : $image.attr('src');\n    $image.data('jg.originalSrc', imageSrc);\n    return imageSrc;\n  };\n  \n  /** @returns {jQuery} the image in the given entry */\n  JustifiedGallery.prototype.imgFromEntry = function ($entry) {\n    var $img = $entry.find(this.settings.imgSelector);\n    return $img.length === 0 ? null : $img;\n  };\n  \n  /** @returns {jQuery} the caption in the given entry */\n  JustifiedGallery.prototype.captionFromEntry = function ($entry) {\n    var $caption = $entry.find('> .caption');\n    return $caption.length === 0 ? null : $caption;\n  };\n  \n  /**\n   * Display the entry\n   *\n   * @param {jQuery} $entry the entry to display\n   * @param {int} x the x position where the entry must be positioned\n   * @param y the y position where the entry must be positioned\n   * @param imgWidth the image width\n   * @param imgHeight the image height\n   * @param rowHeight the row height of the row that owns the entry\n   */\n  JustifiedGallery.prototype.displayEntry = function ($entry, x, y, imgWidth, imgHeight, rowHeight) {\n    $entry.width(imgWidth);\n    $entry.height(rowHeight);\n    $entry.css('top', y);\n    $entry.css('left', x);\n  \n    var $image = this.imgFromEntry($entry);\n    if ($image !== null) {\n      $image.css('width', imgWidth);\n      $image.css('height', imgHeight);\n      $image.css('margin-left', - imgWidth / 2);\n      $image.css('margin-top', - imgHeight / 2);\n  \n      // Image reloading for an high quality of thumbnails\n      var imageSrc = $image.attr('src');\n      var newImageSrc = this.newSrc(imageSrc, imgWidth, imgHeight, $image[0]);\n  \n      $image.one('error', function () {\n        $image.attr('src', $image.data('jg.originalSrc')); //revert to the original thumbnail, we got it.\n      });\n  \n      var loadNewImage = function () {\n        if (imageSrc !== newImageSrc) { //load the new image after the fadeIn\n          $image.attr('src', newImageSrc);\n        }\n      };\n  \n      if ($entry.data('jg.loaded') === 'skipped') {\n        this.onImageEvent(imageSrc, $.proxy(function() {\n          this.showImg($entry, loadNewImage);\n          $entry.data('jg.loaded', true);\n        }, this));\n      } else {\n        this.showImg($entry, loadNewImage);\n      }\n  \n    } else {\n      this.showImg($entry);\n    }\n  \n    this.displayEntryCaption($entry);\n  };\n  \n  /**\n   * Display the entry caption. If the caption element doesn't exists, it creates the caption using the 'alt'\n   * or the 'title' attributes.\n   *\n   * @param {jQuery} $entry the entry to process\n   */\n  JustifiedGallery.prototype.displayEntryCaption = function ($entry) {\n    var $image = this.imgFromEntry($entry);\n    if ($image !== null && this.settings.captions) {\n      var $imgCaption = this.captionFromEntry($entry);\n  \n      // Create it if it doesn't exists\n      if ($imgCaption === null) {\n        var caption = $image.attr('alt');\n        if (!this.isValidCaption(caption)) caption = $entry.attr('title');\n        if (this.isValidCaption(caption)) { // Create only we found something\n          $imgCaption = $('<div class=\"caption\">' + caption + '</div>');\n          $entry.append($imgCaption);\n          $entry.data('jg.createdCaption', true);\n        }\n      }\n  \n      // Create events (we check again the $imgCaption because it can be still inexistent)\n      if ($imgCaption !== null) {\n        if (!this.settings.cssAnimation) $imgCaption.stop().fadeTo(0, this.settings.captionSettings.nonVisibleOpacity);\n        this.addCaptionEventsHandlers($entry);\n      }\n    } else {\n      this.removeCaptionEventsHandlers($entry);\n    }\n  };\n  \n  /**\n   * Validates the caption\n   *\n   * @param caption The caption that should be validated\n   * @return {boolean} Validation result\n   */\n  JustifiedGallery.prototype.isValidCaption = function (caption) {\n    return (typeof caption !== 'undefined' && caption.length > 0);\n  };\n  \n  /**\n   * The callback for the event 'mouseenter'. It assumes that the event currentTarget is an entry.\n   * It shows the caption using jQuery (or using CSS if it is configured so)\n   *\n   * @param {Event} eventObject the event object\n   */\n  JustifiedGallery.prototype.onEntryMouseEnterForCaption = function (eventObject) {\n    var $caption = this.captionFromEntry($(eventObject.currentTarget));\n    if (this.settings.cssAnimation) {\n      $caption.addClass('caption-visible').removeClass('caption-hidden');\n    } else {\n      $caption.stop().fadeTo(this.settings.captionSettings.animationDuration,\n          this.settings.captionSettings.visibleOpacity);\n    }\n  };\n  \n  /**\n   * The callback for the event 'mouseleave'. It assumes that the event currentTarget is an entry.\n   * It hides the caption using jQuery (or using CSS if it is configured so)\n   *\n   * @param {Event} eventObject the event object\n   */\n  JustifiedGallery.prototype.onEntryMouseLeaveForCaption = function (eventObject) {\n    var $caption = this.captionFromEntry($(eventObject.currentTarget));\n    if (this.settings.cssAnimation) {\n      $caption.removeClass('caption-visible').removeClass('caption-hidden');\n    } else {\n      $caption.stop().fadeTo(this.settings.captionSettings.animationDuration,\n          this.settings.captionSettings.nonVisibleOpacity);\n    }\n  };\n  \n  /**\n   * Add the handlers of the entry for the caption\n   *\n   * @param $entry the entry to modify\n   */\n  JustifiedGallery.prototype.addCaptionEventsHandlers = function ($entry) {\n    var captionMouseEvents = $entry.data('jg.captionMouseEvents');\n    if (typeof captionMouseEvents === 'undefined') {\n      captionMouseEvents = {\n        mouseenter: $.proxy(this.onEntryMouseEnterForCaption, this),\n        mouseleave: $.proxy(this.onEntryMouseLeaveForCaption, this)\n      };\n      $entry.on('mouseenter', undefined, undefined, captionMouseEvents.mouseenter);\n      $entry.on('mouseleave', undefined, undefined, captionMouseEvents.mouseleave);\n      $entry.data('jg.captionMouseEvents', captionMouseEvents);\n    }\n  };\n  \n  /**\n   * Remove the handlers of the entry for the caption\n   *\n   * @param $entry the entry to modify\n   */\n  JustifiedGallery.prototype.removeCaptionEventsHandlers = function ($entry) {\n    var captionMouseEvents = $entry.data('jg.captionMouseEvents');\n    if (typeof captionMouseEvents !== 'undefined') {\n      $entry.off('mouseenter', undefined, captionMouseEvents.mouseenter);\n      $entry.off('mouseleave', undefined, captionMouseEvents.mouseleave);\n      $entry.removeData('jg.captionMouseEvents');\n    }\n  };\n  \n  /**\n   * Clear the building row data to be used for a new row\n   */\n  JustifiedGallery.prototype.clearBuildingRow = function () {\n    this.buildingRow.entriesBuff = [];\n    this.buildingRow.aspectRatio = 0;\n    this.buildingRow.width = 0;\n  };\n  \n  /**\n   * Justify the building row, preparing it to\n   *\n   * @param isLastRow\n   * @returns a boolean to know if the row has been justified or not\n   */\n  JustifiedGallery.prototype.prepareBuildingRow = function (isLastRow) {\n    var i, $entry, imgAspectRatio, newImgW, newImgH, justify = true;\n    var minHeight = 0;\n    var availableWidth = this.galleryWidth - 2 * this.border - (\n        (this.buildingRow.entriesBuff.length - 1) * this.settings.margins);\n    var rowHeight = availableWidth / this.buildingRow.aspectRatio;\n    var defaultRowHeight = this.settings.rowHeight;\n    var justifiable = this.buildingRow.width / availableWidth > this.settings.justifyThreshold;\n  \n    //Skip the last row if we can't justify it and the lastRow == 'hide'\n    if (isLastRow && this.settings.lastRow === 'hide' && !justifiable) {\n      for (i = 0; i < this.buildingRow.entriesBuff.length; i++) {\n        $entry = this.buildingRow.entriesBuff[i];\n        if (this.settings.cssAnimation)\n          $entry.removeClass('entry-visible');\n        else {\n          $entry.stop().fadeTo(0, 0.1);\n          $entry.find('> img, > a > img').fadeTo(0, 0);\n        }\n      }\n      return -1;\n    }\n  \n    // With lastRow = nojustify, justify if is justificable (the images will not become too big)\n    if (isLastRow && !justifiable && this.settings.lastRow !== 'justify' && this.settings.lastRow !== 'hide') {\n      justify = false;\n  \n      if (this.rows > 0) {\n        defaultRowHeight = (this.offY - this.border - this.settings.margins * this.rows) / this.rows;\n        justify = defaultRowHeight * this.buildingRow.aspectRatio / availableWidth > this.settings.justifyThreshold;\n      }\n    }\n  \n    for (i = 0; i < this.buildingRow.entriesBuff.length; i++) {\n      $entry = this.buildingRow.entriesBuff[i];\n      imgAspectRatio = $entry.data('jg.width') / $entry.data('jg.height');\n  \n      if (justify) {\n        newImgW = (i === this.buildingRow.entriesBuff.length - 1) ? availableWidth : rowHeight * imgAspectRatio;\n        newImgH = rowHeight;\n      } else {\n        newImgW = defaultRowHeight * imgAspectRatio;\n        newImgH = defaultRowHeight;\n      }\n  \n      availableWidth -= Math.round(newImgW);\n      $entry.data('jg.jwidth', Math.round(newImgW));\n      $entry.data('jg.jheight', Math.ceil(newImgH));\n      if (i === 0 || minHeight > newImgH) minHeight = newImgH;\n    }\n  \n    this.buildingRow.height = minHeight;\n    return justify;\n  };\n  \n  /**\n   * Flush a row: justify it, modify the gallery height accordingly to the row height\n   *\n   * @param isLastRow\n   */\n  JustifiedGallery.prototype.flushRow = function (isLastRow) {\n    var settings = this.settings;\n    var $entry, buildingRowRes, offX = this.border, i;\n  \n    buildingRowRes = this.prepareBuildingRow(isLastRow);\n    if (isLastRow && settings.lastRow === 'hide' && buildingRowRes === -1) {\n      this.clearBuildingRow();\n      return;\n    }\n  \n    if(this.maxRowHeight) {\n      if(this.maxRowHeight < this.buildingRow.height)  this.buildingRow.height = this.maxRowHeight;\n    }\n  \n    //Align last (unjustified) row\n    if (isLastRow && (settings.lastRow === 'center' || settings.lastRow === 'right')) {\n      var availableWidth = this.galleryWidth - 2 * this.border - (this.buildingRow.entriesBuff.length - 1) * settings.margins;\n  \n      for (i = 0; i < this.buildingRow.entriesBuff.length; i++) {\n        $entry = this.buildingRow.entriesBuff[i];\n        availableWidth -= $entry.data('jg.jwidth');\n      }\n  \n      if (settings.lastRow === 'center')\n        offX += availableWidth / 2;\n      else if (settings.lastRow === 'right')\n        offX += availableWidth;\n    }\n  \n    var lastEntryIdx = this.buildingRow.entriesBuff.length - 1;\n    for (i = 0; i <= lastEntryIdx; i++) {\n      $entry = this.buildingRow.entriesBuff[ this.settings.rtl ? lastEntryIdx - i : i ];\n      this.displayEntry($entry, offX, this.offY, $entry.data('jg.jwidth'), $entry.data('jg.jheight'), this.buildingRow.height);\n      offX += $entry.data('jg.jwidth') + settings.margins;\n    }\n  \n    //Gallery Height\n    this.galleryHeightToSet = this.offY + this.buildingRow.height + this.border;\n    this.setGalleryTempHeight(this.galleryHeightToSet + this.getSpinnerHeight());\n  \n    if (!isLastRow || (this.buildingRow.height <= settings.rowHeight && buildingRowRes)) {\n      //Ready for a new row\n      this.offY += this.buildingRow.height + settings.margins;\n      this.rows += 1;\n      this.clearBuildingRow();\n      this.settings.triggerEvent.call(this, 'jg.rowflush');\n    }\n  };\n  \n  \n  // Scroll position not restoring: https://github.com/miromannino/Justified-Gallery/issues/221\n  var galleryPrevStaticHeight = 0;\n  \n  JustifiedGallery.prototype.rememberGalleryHeight = function () {\n    galleryPrevStaticHeight = this.$gallery.height();\n    this.$gallery.height(galleryPrevStaticHeight);\n  };\n  \n  // grow only\n  JustifiedGallery.prototype.setGalleryTempHeight = function (height) {\n    galleryPrevStaticHeight = Math.max(height, galleryPrevStaticHeight);\n    this.$gallery.height(galleryPrevStaticHeight);\n  };\n  \n  JustifiedGallery.prototype.setGalleryFinalHeight = function (height) {\n    galleryPrevStaticHeight = height;\n    this.$gallery.height(height);\n  };\n  \n  /**\n   * @returns {boolean} a boolean saying if the scrollbar is active or not\n   */\n  function hasScrollBar() {\n    return $(\"body\").height() > $(window).height();\n  }\n  \n  /**\n   * Checks the width of the gallery container, to know if a new justification is needed\n   */\n  JustifiedGallery.prototype.checkWidth = function () {\n    this.checkWidthIntervalId = setInterval($.proxy(function () {\n  \n      // if the gallery is not currently visible, abort.\n      if (!this.$gallery.is(\":visible\")) return;\n  \n      var galleryWidth = parseFloat(this.$gallery.width());\n      if (hasScrollBar() === this.scrollBarOn) {\n        if (Math.abs(galleryWidth - this.galleryWidth) > this.settings.refreshSensitivity) {\n          this.galleryWidth = galleryWidth;\n          this.rewind();\n  \n          this.rememberGalleryHeight();\n  \n          // Restart to analyze\n          this.startImgAnalyzer(true);\n        }\n      } else {\n        this.scrollBarOn = hasScrollBar();\n        this.galleryWidth = galleryWidth;\n      }\n    }, this), this.settings.refreshTime);\n  };\n  \n  /**\n   * @returns {boolean} a boolean saying if the spinner is active or not\n   */\n  JustifiedGallery.prototype.isSpinnerActive = function () {\n    return this.spinner.intervalId !== null;\n  };\n  \n  /**\n   * @returns {int} the spinner height\n   */\n  JustifiedGallery.prototype.getSpinnerHeight = function () {\n    return this.spinner.$el.innerHeight();\n  };\n  \n  /**\n   * Stops the spinner animation and modify the gallery height to exclude the spinner\n   */\n  JustifiedGallery.prototype.stopLoadingSpinnerAnimation = function () {\n    clearInterval(this.spinner.intervalId);\n    this.spinner.intervalId = null;\n    this.setGalleryTempHeight(this.$gallery.height() - this.getSpinnerHeight());\n    this.spinner.$el.detach();\n  };\n  \n  /**\n   * Starts the spinner animation\n   */\n  JustifiedGallery.prototype.startLoadingSpinnerAnimation = function () {\n    var spinnerContext = this.spinner;\n    var $spinnerPoints = spinnerContext.$el.find('span');\n    clearInterval(spinnerContext.intervalId);\n    this.$gallery.append(spinnerContext.$el);\n    this.setGalleryTempHeight(this.offY + this.buildingRow.height + this.getSpinnerHeight());\n    spinnerContext.intervalId = setInterval(function () {\n      if (spinnerContext.phase < $spinnerPoints.length) {\n        $spinnerPoints.eq(spinnerContext.phase).fadeTo(spinnerContext.timeSlot, 1);\n      } else {\n        $spinnerPoints.eq(spinnerContext.phase - $spinnerPoints.length).fadeTo(spinnerContext.timeSlot, 0);\n      }\n      spinnerContext.phase = (spinnerContext.phase + 1) % ($spinnerPoints.length * 2);\n    }, spinnerContext.timeSlot);\n  };\n  \n  /**\n   * Rewind the image analysis to start from the first entry.\n   */\n  JustifiedGallery.prototype.rewind = function () {\n    this.lastFetchedEntry = null;\n    this.lastAnalyzedIndex = -1;\n    this.offY = this.border;\n    this.rows = 0;\n    this.clearBuildingRow();\n  };\n  \n  /**\n   * Update the entries searching it from the justified gallery HTML element\n   *\n   * @param norewind if norewind only the new entries will be changed (i.e. randomized, sorted or filtered)\n   * @returns {boolean} true if some entries has been founded\n   */\n  JustifiedGallery.prototype.updateEntries = function (norewind) {\n    var newEntries;\n  \n    if (norewind && this.lastFetchedEntry != null) {\n      newEntries = $(this.lastFetchedEntry).nextAll(this.settings.selector).toArray();\n    } else {\n      this.entries = [];\n      newEntries = this.$gallery.children(this.settings.selector).toArray();\n    }\n  \n    if (newEntries.length > 0) {\n  \n      // Sort or randomize\n      if ($.isFunction(this.settings.sort)) {\n        newEntries = this.sortArray(newEntries);\n      } else if (this.settings.randomize) {\n        newEntries = this.shuffleArray(newEntries);\n      }\n      this.lastFetchedEntry = newEntries[newEntries.length - 1];\n  \n      // Filter\n      if (this.settings.filter) {\n        newEntries = this.filterArray(newEntries);\n      } else {\n        this.resetFilters(newEntries);\n      }\n  \n    }\n  \n    this.entries = this.entries.concat(newEntries);\n    return true;\n  };\n  \n  /**\n   * Apply the entries order to the DOM, iterating the entries and appending the images\n   *\n   * @param entries the entries that has been modified and that must be re-ordered in the DOM\n   */\n  JustifiedGallery.prototype.insertToGallery = function (entries) {\n    var that = this;\n    $.each(entries, function () {\n      $(this).appendTo(that.$gallery);\n    });\n  };\n  \n  /**\n   * Shuffle the array using the Fisher-Yates shuffle algorithm\n   *\n   * @param a the array to shuffle\n   * @return the shuffled array\n   */\n  JustifiedGallery.prototype.shuffleArray = function (a) {\n    var i, j, temp;\n    for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      temp = a[i];\n      a[i] = a[j];\n      a[j] = temp;\n    }\n    this.insertToGallery(a);\n    return a;\n  };\n  \n  /**\n   * Sort the array using settings.comparator as comparator\n   *\n   * @param a the array to sort (it is sorted)\n   * @return the sorted array\n   */\n  JustifiedGallery.prototype.sortArray = function (a) {\n    a.sort(this.settings.sort);\n    this.insertToGallery(a);\n    return a;\n  };\n  \n  /**\n   * Reset the filters removing the 'jg-filtered' class from all the entries\n   *\n   * @param a the array to reset\n   */\n  JustifiedGallery.prototype.resetFilters = function (a) {\n    for (var i = 0; i < a.length; i++) $(a[i]).removeClass('jg-filtered');\n  };\n  \n  /**\n   * Filter the entries considering theirs classes (if a string has been passed) or using a function for filtering.\n   *\n   * @param a the array to filter\n   * @return the filtered array\n   */\n  JustifiedGallery.prototype.filterArray = function (a) {\n    var settings = this.settings;\n    if ($.type(settings.filter) === 'string') {\n      // Filter only keeping the entries passed in the string\n      return a.filter(function (el) {\n        var $el = $(el);\n        if ($el.is(settings.filter)) {\n          $el.removeClass('jg-filtered');\n          return true;\n        } else {\n          $el.addClass('jg-filtered').removeClass('jg-visible');\n          return false;\n        }\n      });\n    } else if ($.isFunction(settings.filter)) {\n      // Filter using the passed function\n      var filteredArr = a.filter(settings.filter);\n      for (var i = 0; i < a.length; i++) {\n        if (filteredArr.indexOf(a[i]) === -1) {\n          $(a[i]).addClass('jg-filtered').removeClass('jg-visible');\n        } else {\n          $(a[i]).removeClass('jg-filtered');\n        }\n      }\n      return filteredArr;\n    }\n  };\n  \n  /**\n   * Destroy the Justified Gallery instance.\n   *\n   * It clears all the css properties added in the style attributes. We doesn't backup the original\n   * values for those css attributes, because it costs (performance) and because in general one\n   * shouldn't use the style attribute for an uniform set of images (where we suppose the use of\n   * classes). Creating a backup is also difficult because JG could be called multiple times and\n   * with different style attributes.\n   */\n  JustifiedGallery.prototype.destroy = function () {\n    clearInterval(this.checkWidthIntervalId);\n  \n    $.each(this.entries, $.proxy(function(_, entry) {\n      var $entry = $(entry);\n  \n      // Reset entry style\n      $entry.css('width', '');\n      $entry.css('height', '');\n      $entry.css('top', '');\n      $entry.css('left', '');\n      $entry.data('jg.loaded', undefined);\n      $entry.removeClass('jg-entry');\n  \n      // Reset image style\n      var $img = this.imgFromEntry($entry);\n      $img.css('width', '');\n      $img.css('height', '');\n      $img.css('margin-left', '');\n      $img.css('margin-top', '');\n      $img.attr('src', $img.data('jg.originalSrc'));\n      $img.data('jg.originalSrc', undefined);\n  \n      // Remove caption\n      this.removeCaptionEventsHandlers($entry);\n      var $caption = this.captionFromEntry($entry);\n      if ($entry.data('jg.createdCaption')) {\n        // remove also the caption element (if created by jg)\n        $entry.data('jg.createdCaption', undefined);\n        if ($caption !== null) $caption.remove();\n      } else {\n        if ($caption !== null) $caption.fadeTo(0, 1);\n      }\n  \n    }, this));\n  \n    this.$gallery.css('height', '');\n    this.$gallery.removeClass('justified-gallery');\n    this.$gallery.data('jg.controller', undefined);\n  };\n  \n  /**\n   * Analyze the images and builds the rows. It returns if it found an image that is not loaded.\n   *\n   * @param isForResize if the image analyzer is called for resizing or not, to call a different callback at the end\n   */\n  JustifiedGallery.prototype.analyzeImages = function (isForResize) {\n    for (var i = this.lastAnalyzedIndex + 1; i < this.entries.length; i++) {\n      var $entry = $(this.entries[i]);\n      if ($entry.data('jg.loaded') === true || $entry.data('jg.loaded') === 'skipped') {\n        var availableWidth = this.galleryWidth - 2 * this.border - (\n            (this.buildingRow.entriesBuff.length - 1) * this.settings.margins);\n        var imgAspectRatio = $entry.data('jg.width') / $entry.data('jg.height');\n        if (availableWidth / (this.buildingRow.aspectRatio + imgAspectRatio) < this.settings.rowHeight) {\n          this.flushRow(false);\n  \n          if(++this.yield.flushed >= this.yield.every) {\n            this.startImgAnalyzer(isForResize);\n            return;\n          }\n        }\n  \n        this.buildingRow.entriesBuff.push($entry);\n        this.buildingRow.aspectRatio += imgAspectRatio;\n        this.buildingRow.width += imgAspectRatio * this.settings.rowHeight;\n        this.lastAnalyzedIndex = i;\n  \n      } else if ($entry.data('jg.loaded') !== 'error') {\n        return;\n      }\n    }\n  \n    // Last row flush (the row is not full)\n    if (this.buildingRow.entriesBuff.length > 0) this.flushRow(true);\n  \n    if (this.isSpinnerActive()) {\n      this.stopLoadingSpinnerAnimation();\n    }\n  \n    /* Stop, if there is, the timeout to start the analyzeImages.\n     This is because an image can be set loaded, and the timeout can be set,\n     but this image can be analyzed yet.\n     */\n    this.stopImgAnalyzerStarter();\n  \n    //On complete callback\n    this.settings.triggerEvent.call(this, isForResize ? 'jg.resize' : 'jg.complete');\n    this.setGalleryFinalHeight(this.galleryHeightToSet);\n  };\n  \n  /**\n   * Stops any ImgAnalyzer starter (that has an assigned timeout)\n   */\n  JustifiedGallery.prototype.stopImgAnalyzerStarter = function () {\n    this.yield.flushed = 0;\n    if (this.imgAnalyzerTimeout !== null) {\n      clearTimeout(this.imgAnalyzerTimeout);\n      this.imgAnalyzerTimeout = null;\n    }\n  };\n  \n  /**\n   * Starts the image analyzer. It is not immediately called to let the browser to update the view\n   *\n   * @param isForResize specifies if the image analyzer must be called for resizing or not\n   */\n  JustifiedGallery.prototype.startImgAnalyzer = function (isForResize) {\n    var that = this;\n    this.stopImgAnalyzerStarter();\n    this.imgAnalyzerTimeout = setTimeout(function () {\n      that.analyzeImages(isForResize);\n    }, 0.001); // we can't start it immediately due to a IE different behaviour\n  };\n  \n  /**\n   * Checks if the image is loaded or not using another image object. We cannot use the 'complete' image property,\n   * because some browsers, with a 404 set complete = true.\n   *\n   * @param imageSrc the image src to load\n   * @param onLoad callback that is called when the image has been loaded\n   * @param onError callback that is called in case of an error\n   */\n  JustifiedGallery.prototype.onImageEvent = function (imageSrc, onLoad, onError) {\n    if (!onLoad && !onError) return;\n  \n    var memImage = new Image();\n    var $memImage = $(memImage);\n    if (onLoad) {\n      $memImage.one('load', function () {\n        $memImage.off('load error');\n        onLoad(memImage);\n      });\n    }\n    if (onError) {\n      $memImage.one('error', function() {\n        $memImage.off('load error');\n        onError(memImage);\n      });\n    }\n    memImage.src = imageSrc;\n  };\n  \n  /**\n   * Init of Justified Gallery controlled\n   * It analyzes all the entries starting theirs loading and calling the image analyzer (that works with loaded images)\n   */\n  JustifiedGallery.prototype.init = function () {\n    var imagesToLoad = false, skippedImages = false, that = this;\n    $.each(this.entries, function (index, entry) {\n      var $entry = $(entry);\n      var $image = that.imgFromEntry($entry);\n  \n      $entry.addClass('jg-entry');\n  \n      if ($entry.data('jg.loaded') !== true && $entry.data('jg.loaded') !== 'skipped') {\n  \n        // Link Rel global overwrite\n        if (that.settings.rel !== null) $entry.attr('rel', that.settings.rel);\n  \n        // Link Target global overwrite\n        if (that.settings.target !== null) $entry.attr('target', that.settings.target);\n  \n        if ($image !== null) {\n  \n          // Image src\n          var imageSrc = that.extractImgSrcFromImage($image);\n          $image.attr('src', imageSrc);\n  \n          /* If we have the height and the width, we don't wait that the image is loaded, but we start directly\n           * with the justification */\n          if (that.settings.waitThumbnailsLoad === false) {\n            var width = parseFloat($image.prop('width'));\n            var height = parseFloat($image.prop('height'));\n            if (!isNaN(width) && !isNaN(height)) {\n              $entry.data('jg.width', width);\n              $entry.data('jg.height', height);\n              $entry.data('jg.loaded', 'skipped');\n              skippedImages = true;\n              that.startImgAnalyzer(false);\n              return true; // continue\n            }\n          }\n  \n          $entry.data('jg.loaded', false);\n          imagesToLoad = true;\n  \n          // Spinner start\n          if (!that.isSpinnerActive()) that.startLoadingSpinnerAnimation();\n  \n          that.onImageEvent(imageSrc, function (loadImg) { // image loaded\n            $entry.data('jg.width', loadImg.width);\n            $entry.data('jg.height', loadImg.height);\n            $entry.data('jg.loaded', true);\n            that.startImgAnalyzer(false);\n          }, function () { // image load error\n            $entry.data('jg.loaded', 'error');\n            that.startImgAnalyzer(false);\n          });\n  \n        } else {\n          $entry.data('jg.loaded', true);\n          $entry.data('jg.width', $entry.width() | parseFloat($entry.css('width')) | 1);\n          $entry.data('jg.height', $entry.height() | parseFloat($entry.css('height')) | 1);\n        }\n  \n      }\n  \n    });\n  \n    if (!imagesToLoad && !skippedImages) this.startImgAnalyzer(false);\n    this.checkWidth();\n  };\n  \n  /**\n   * Checks that it is a valid number. If a string is passed it is converted to a number\n   *\n   * @param settingContainer the object that contains the setting (to allow the conversion)\n   * @param settingName the setting name\n   */\n  JustifiedGallery.prototype.checkOrConvertNumber = function (settingContainer, settingName) {\n    if ($.type(settingContainer[settingName]) === 'string') {\n      settingContainer[settingName] = parseFloat(settingContainer[settingName]);\n    }\n  \n    if ($.type(settingContainer[settingName]) === 'number') {\n      if (isNaN(settingContainer[settingName])) throw 'invalid number for ' + settingName;\n    } else {\n      throw settingName + ' must be a number';\n    }\n  };\n  \n  /**\n   * Checks the sizeRangeSuffixes and, if necessary, converts\n   * its keys from string (e.g. old settings with 'lt100') to int.\n   */\n  JustifiedGallery.prototype.checkSizeRangesSuffixes = function () {\n    if ($.type(this.settings.sizeRangeSuffixes) !== 'object') {\n      throw 'sizeRangeSuffixes must be defined and must be an object';\n    }\n  \n    var suffixRanges = [];\n    for (var rangeIdx in this.settings.sizeRangeSuffixes) {\n      if (this.settings.sizeRangeSuffixes.hasOwnProperty(rangeIdx)) suffixRanges.push(rangeIdx);\n    }\n  \n    var newSizeRngSuffixes = {0: ''};\n    for (var i = 0; i < suffixRanges.length; i++) {\n      if ($.type(suffixRanges[i]) === 'string') {\n        try {\n          var numIdx = parseInt(suffixRanges[i].replace(/^[a-z]+/, ''), 10);\n          newSizeRngSuffixes[numIdx] = this.settings.sizeRangeSuffixes[suffixRanges[i]];\n        } catch (e) {\n          throw 'sizeRangeSuffixes keys must contains correct numbers (' + e + ')';\n        }\n      } else {\n        newSizeRngSuffixes[suffixRanges[i]] = this.settings.sizeRangeSuffixes[suffixRanges[i]];\n      }\n    }\n  \n    this.settings.sizeRangeSuffixes = newSizeRngSuffixes;\n  };\n  \n  /**\n   * check and convert the maxRowHeight setting\n   * requires rowHeight to be already set\n   * TODO: should be always called when only rowHeight is changed\n   * @return number or null\n   */\n  JustifiedGallery.prototype.retrieveMaxRowHeight = function () {\n    var newMaxRowHeight = null;\n    var rowHeight = this.settings.rowHeight;\n  \n    if ($.type(this.settings.maxRowHeight) === 'string') {\n      if (this.settings.maxRowHeight.match(/^[0-9]+%$/)) {\n        newMaxRowHeight = rowHeight * parseFloat(this.settings.maxRowHeight.match(/^([0-9]+)%$/)[1]) / 100;\n      } else {\n        newMaxRowHeight = parseFloat(this.settings.maxRowHeight);\n      }\n    } else if ($.type(this.settings.maxRowHeight) === 'number') {\n      newMaxRowHeight = this.settings.maxRowHeight;\n    } else if (this.settings.maxRowHeight === false || this.settings.maxRowHeight == null) {\n      return null;\n    } else {\n      throw 'maxRowHeight must be a number or a percentage';\n    }\n  \n    // check if the converted value is not a number\n    if (isNaN(newMaxRowHeight)) throw 'invalid number for maxRowHeight';\n  \n    // check values, maxRowHeight must be >= rowHeight\n    if (newMaxRowHeight < rowHeight) newMaxRowHeight = rowHeight;\n  \n    return newMaxRowHeight;\n  };\n  \n  /**\n   * Checks the settings\n   */\n  JustifiedGallery.prototype.checkSettings = function () {\n    this.checkSizeRangesSuffixes();\n  \n    this.checkOrConvertNumber(this.settings, 'rowHeight');\n    this.checkOrConvertNumber(this.settings, 'margins');\n    this.checkOrConvertNumber(this.settings, 'border');\n  \n    var lastRowModes = [\n      'justify',\n      'nojustify',\n      'left',\n      'center',\n      'right',\n      'hide'\n    ];\n    if (lastRowModes.indexOf(this.settings.lastRow) === -1) {\n      throw 'lastRow must be one of: ' + lastRowModes.join(', ');\n    }\n  \n    this.checkOrConvertNumber(this.settings, 'justifyThreshold');\n    if (this.settings.justifyThreshold < 0 || this.settings.justifyThreshold > 1) {\n      throw 'justifyThreshold must be in the interval [0,1]';\n    }\n    if ($.type(this.settings.cssAnimation) !== 'boolean') {\n      throw 'cssAnimation must be a boolean';\n    }\n  \n    if ($.type(this.settings.captions) !== 'boolean') throw 'captions must be a boolean';\n    this.checkOrConvertNumber(this.settings.captionSettings, 'animationDuration');\n  \n    this.checkOrConvertNumber(this.settings.captionSettings, 'visibleOpacity');\n    if (this.settings.captionSettings.visibleOpacity < 0 ||\n        this.settings.captionSettings.visibleOpacity > 1) {\n      throw 'captionSettings.visibleOpacity must be in the interval [0, 1]';\n    }\n  \n    this.checkOrConvertNumber(this.settings.captionSettings, 'nonVisibleOpacity');\n    if (this.settings.captionSettings.nonVisibleOpacity < 0 ||\n        this.settings.captionSettings.nonVisibleOpacity > 1) {\n      throw 'captionSettings.nonVisibleOpacity must be in the interval [0, 1]';\n    }\n  \n    this.checkOrConvertNumber(this.settings, 'imagesAnimationDuration');\n    this.checkOrConvertNumber(this.settings, 'refreshTime');\n    this.checkOrConvertNumber(this.settings, 'refreshSensitivity');\n    if ($.type(this.settings.randomize) !== 'boolean') throw 'randomize must be a boolean';\n    if ($.type(this.settings.selector) !== 'string') throw 'selector must be a string';\n  \n    if (this.settings.sort !== false && !$.isFunction(this.settings.sort)) {\n      throw 'sort must be false or a comparison function';\n    }\n  \n    if (this.settings.filter !== false && !$.isFunction(this.settings.filter) &&\n        $.type(this.settings.filter) !== 'string') {\n      throw 'filter must be false, a string or a filter function';\n    }\n  };\n  \n  /**\n   * It brings all the indexes from the sizeRangeSuffixes and it orders them. They are then sorted and returned.\n   * @returns {Array} sorted suffix ranges\n   */\n  JustifiedGallery.prototype.retrieveSuffixRanges = function () {\n    var suffixRanges = [];\n    for (var rangeIdx in this.settings.sizeRangeSuffixes) {\n      if (this.settings.sizeRangeSuffixes.hasOwnProperty(rangeIdx)) suffixRanges.push(parseInt(rangeIdx, 10));\n    }\n    suffixRanges.sort(function (a, b) { return a > b ? 1 : a < b ? -1 : 0; });\n    return suffixRanges;\n  };\n  \n  /**\n   * Update the existing settings only changing some of them\n   *\n   * @param newSettings the new settings (or a subgroup of them)\n   */\n  JustifiedGallery.prototype.updateSettings = function (newSettings) {\n    // In this case Justified Gallery has been called again changing only some options\n    this.settings = $.extend({}, this.settings, newSettings);\n    this.checkSettings();\n  \n    // As reported in the settings: negative value = same as margins, 0 = disabled\n    this.border = this.settings.border >= 0 ? this.settings.border : this.settings.margins;\n  \n    this.maxRowHeight = this.retrieveMaxRowHeight();\n    this.suffixRanges = this.retrieveSuffixRanges();\n  };\n  \n  JustifiedGallery.prototype.defaults = {\n    sizeRangeSuffixes: { }, /* e.g. Flickr configuration\n        {\n          100: '_t',  // used when longest is less than 100px\n          240: '_m',  // used when longest is between 101px and 240px\n          320: '_n',  // ...\n          500: '',\n          640: '_z',\n          1024: '_b'  // used as else case because it is the last\n        }\n    */\n    thumbnailPath: undefined, /* If defined, sizeRangeSuffixes is not used, and this function is used to determine the\n    path relative to a specific thumbnail size. The function should accept respectively three arguments:\n    current path, width and height */\n    rowHeight: 120, // required? required to be > 0?\n    maxRowHeight: false, // false or negative value to deactivate. Positive number to express the value in pixels,\n                         // A string '[0-9]+%' to express in percentage (e.g. 300% means that the row height\n                         // can't exceed 3 * rowHeight)\n    margins: 1,\n    border: -1, // negative value = same as margins, 0 = disabled, any other value to set the border\n  \n    lastRow: 'nojustify', // … which is the same as 'left', or can be 'justify', 'center', 'right' or 'hide'\n  \n    justifyThreshold: 0.90, /* if row width / available space > 0.90 it will be always justified\n                             * (i.e. lastRow setting is not considered) */\n    waitThumbnailsLoad: true,\n    captions: true,\n    cssAnimation: true,\n    imagesAnimationDuration: 500, // ignored with css animations\n    captionSettings: { // ignored with css animations\n      animationDuration: 500,\n      visibleOpacity: 0.7,\n      nonVisibleOpacity: 0.0\n    },\n    rel: null, // rewrite the rel of each analyzed links\n    target: null, // rewrite the target of all links\n    extension: /\\.[^.\\\\/]+$/, // regexp to capture the extension of an image\n    refreshTime: 200, // time interval (in ms) to check if the page changes its width\n    refreshSensitivity: 0, // change in width allowed (in px) without re-building the gallery\n    randomize: false,\n    rtl: false, // right-to-left mode\n    sort: false, /*\n      - false: to do not sort\n      - function: to sort them using the function as comparator (see Array.prototype.sort())\n    */\n    filter: false, /*\n      - false, null or undefined: for a disabled filter\n      - a string: an entry is kept if entry.is(filter string) returns true\n                  see jQuery's .is() function for further information\n      - a function: invoked with arguments (entry, index, array). Return true to keep the entry, false otherwise.\n                    It follows the specifications of the Array.prototype.filter() function of JavaScript.\n    */\n    selector: 'a, div:not(.spinner)', // The selector that is used to know what are the entries of the gallery\n    imgSelector: '> img, > a > img', // The selector that is used to know what are the images of each entry\n    triggerEvent: function (event) { // This is called to trigger events, the default behavior is to call $.trigger\n      this.$gallery.trigger(event);  // Consider that 'this' is this set to the JustifiedGallery object, so it can\n    }                                // access to fields such as $gallery, useful to trigger events with jQuery.\n  };\n\n  /**\n   * Justified Gallery plugin for jQuery\n   *\n   * Events\n   *  - jg.complete : called when all the gallery has been created\n   *  - jg.resize : called when the gallery has been resized\n   *  - jg.rowflush : when a new row appears\n   *\n   * @param arg the action (or the settings) passed when the plugin is called\n   * @returns {*} the object itself\n   */\n  $.fn.justifiedGallery = function (arg) {\n    return this.each(function (index, gallery) {\n\n      var $gallery = $(gallery);\n      $gallery.addClass('justified-gallery');\n\n      var controller = $gallery.data('jg.controller');\n      if (typeof controller === 'undefined') {\n        // Create controller and assign it to the object data\n        if (typeof arg !== 'undefined' && arg !== null && $.type(arg) !== 'object') {\n          if (arg === 'destroy') return; // Just a call to an unexisting object\n          throw 'The argument must be an object';\n        }\n        controller = new JustifiedGallery($gallery, $.extend({}, JustifiedGallery.prototype.defaults, arg));\n        $gallery.data('jg.controller', controller);\n      } else if (arg === 'norewind') {\n        // In this case we don't rewind: we analyze only the latest images (e.g. to complete the last unfinished row\n        // ... left to be more readable\n      } else if (arg === 'destroy') {\n        controller.destroy();\n        return;\n      } else {\n        // In this case Justified Gallery has been called again changing only some options\n        controller.updateSettings(arg);\n        controller.rewind();\n      }\n\n      // Update the entries list\n      if (!controller.updateEntries(arg === 'norewind')) return;\n\n      // Init justified gallery\n      controller.init();\n\n    });\n  };\n\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/justifiedGallery/dist/js/jquery.justifiedGallery.js\n");

/***/ }),

/***/ "./node_modules/slick-carousel/slick/slick.js":
/*!****************************************************!*\
  !*** ./node_modules/slick-carousel/slick/slick.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n     _ _      _       _\n ___| (_) ___| | __  (_)___\n/ __| | |/ __| |/ /  | / __|\n\\__ \\ | | (__|   < _ | \\__ \\\n|___/_|_|\\___|_|\\_(_)/ |___/\n                   |__/\n\n Version: 1.8.1\n  Author: Ken Wheeler\n Website: http://kenwheeler.github.io\n    Docs: http://kenwheeler.github.io/slick\n    Repo: http://github.com/kenwheeler/slick\n  Issues: http://github.com/kenwheeler/slick/issues\n\n */\n/* global window, document, define, jQuery, setInterval, clearInterval */\n;(function(factory) {\n    'use strict';\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"jquery\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n\n}(function($) {\n    'use strict';\n    var Slick = window.Slick || {};\n\n    Slick = (function() {\n\n        var instanceUid = 0;\n\n        function Slick(element, settings) {\n\n            var _ = this, dataSettings;\n\n            _.defaults = {\n                accessibility: true,\n                adaptiveHeight: false,\n                appendArrows: $(element),\n                appendDots: $(element),\n                arrows: true,\n                asNavFor: null,\n                prevArrow: '<button class=\"slick-prev\" aria-label=\"Previous\" type=\"button\">Previous</button>',\n                nextArrow: '<button class=\"slick-next\" aria-label=\"Next\" type=\"button\">Next</button>',\n                autoplay: false,\n                autoplaySpeed: 3000,\n                centerMode: false,\n                centerPadding: '50px',\n                cssEase: 'ease',\n                customPaging: function(slider, i) {\n                    return $('<button type=\"button\" />').text(i + 1);\n                },\n                dots: false,\n                dotsClass: 'slick-dots',\n                draggable: true,\n                easing: 'linear',\n                edgeFriction: 0.35,\n                fade: false,\n                focusOnSelect: false,\n                focusOnChange: false,\n                infinite: true,\n                initialSlide: 0,\n                lazyLoad: 'ondemand',\n                mobileFirst: false,\n                pauseOnHover: true,\n                pauseOnFocus: true,\n                pauseOnDotsHover: false,\n                respondTo: 'window',\n                responsive: null,\n                rows: 1,\n                rtl: false,\n                slide: '',\n                slidesPerRow: 1,\n                slidesToShow: 1,\n                slidesToScroll: 1,\n                speed: 500,\n                swipe: true,\n                swipeToSlide: false,\n                touchMove: true,\n                touchThreshold: 5,\n                useCSS: true,\n                useTransform: true,\n                variableWidth: false,\n                vertical: false,\n                verticalSwiping: false,\n                waitForAnimate: true,\n                zIndex: 1000\n            };\n\n            _.initials = {\n                animating: false,\n                dragging: false,\n                autoPlayTimer: null,\n                currentDirection: 0,\n                currentLeft: null,\n                currentSlide: 0,\n                direction: 1,\n                $dots: null,\n                listWidth: null,\n                listHeight: null,\n                loadIndex: 0,\n                $nextArrow: null,\n                $prevArrow: null,\n                scrolling: false,\n                slideCount: null,\n                slideWidth: null,\n                $slideTrack: null,\n                $slides: null,\n                sliding: false,\n                slideOffset: 0,\n                swipeLeft: null,\n                swiping: false,\n                $list: null,\n                touchObject: {},\n                transformsEnabled: false,\n                unslicked: false\n            };\n\n            $.extend(_, _.initials);\n\n            _.activeBreakpoint = null;\n            _.animType = null;\n            _.animProp = null;\n            _.breakpoints = [];\n            _.breakpointSettings = [];\n            _.cssTransitions = false;\n            _.focussed = false;\n            _.interrupted = false;\n            _.hidden = 'hidden';\n            _.paused = true;\n            _.positionProp = null;\n            _.respondTo = null;\n            _.rowCount = 1;\n            _.shouldClick = true;\n            _.$slider = $(element);\n            _.$slidesCache = null;\n            _.transformType = null;\n            _.transitionType = null;\n            _.visibilityChange = 'visibilitychange';\n            _.windowWidth = 0;\n            _.windowTimer = null;\n\n            dataSettings = $(element).data('slick') || {};\n\n            _.options = $.extend({}, _.defaults, settings, dataSettings);\n\n            _.currentSlide = _.options.initialSlide;\n\n            _.originalSettings = _.options;\n\n            if (typeof document.mozHidden !== 'undefined') {\n                _.hidden = 'mozHidden';\n                _.visibilityChange = 'mozvisibilitychange';\n            } else if (typeof document.webkitHidden !== 'undefined') {\n                _.hidden = 'webkitHidden';\n                _.visibilityChange = 'webkitvisibilitychange';\n            }\n\n            _.autoPlay = $.proxy(_.autoPlay, _);\n            _.autoPlayClear = $.proxy(_.autoPlayClear, _);\n            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);\n            _.changeSlide = $.proxy(_.changeSlide, _);\n            _.clickHandler = $.proxy(_.clickHandler, _);\n            _.selectHandler = $.proxy(_.selectHandler, _);\n            _.setPosition = $.proxy(_.setPosition, _);\n            _.swipeHandler = $.proxy(_.swipeHandler, _);\n            _.dragHandler = $.proxy(_.dragHandler, _);\n            _.keyHandler = $.proxy(_.keyHandler, _);\n\n            _.instanceUid = instanceUid++;\n\n            // A simple way to check for HTML strings\n            // Strict HTML recognition (must start with <)\n            // Extracted from jQuery v1.11 source\n            _.htmlExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*)$/;\n\n\n            _.registerBreakpoints();\n            _.init(true);\n\n        }\n\n        return Slick;\n\n    }());\n\n    Slick.prototype.activateADA = function() {\n        var _ = this;\n\n        _.$slideTrack.find('.slick-active').attr({\n            'aria-hidden': 'false'\n        }).find('a, input, button, select').attr({\n            'tabindex': '0'\n        });\n\n    };\n\n    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {\n\n        var _ = this;\n\n        if (typeof(index) === 'boolean') {\n            addBefore = index;\n            index = null;\n        } else if (index < 0 || (index >= _.slideCount)) {\n            return false;\n        }\n\n        _.unload();\n\n        if (typeof(index) === 'number') {\n            if (index === 0 && _.$slides.length === 0) {\n                $(markup).appendTo(_.$slideTrack);\n            } else if (addBefore) {\n                $(markup).insertBefore(_.$slides.eq(index));\n            } else {\n                $(markup).insertAfter(_.$slides.eq(index));\n            }\n        } else {\n            if (addBefore === true) {\n                $(markup).prependTo(_.$slideTrack);\n            } else {\n                $(markup).appendTo(_.$slideTrack);\n            }\n        }\n\n        _.$slides = _.$slideTrack.children(this.options.slide);\n\n        _.$slideTrack.children(this.options.slide).detach();\n\n        _.$slideTrack.append(_.$slides);\n\n        _.$slides.each(function(index, element) {\n            $(element).attr('data-slick-index', index);\n        });\n\n        _.$slidesCache = _.$slides;\n\n        _.reinit();\n\n    };\n\n    Slick.prototype.animateHeight = function() {\n        var _ = this;\n        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\n            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\n            _.$list.animate({\n                height: targetHeight\n            }, _.options.speed);\n        }\n    };\n\n    Slick.prototype.animateSlide = function(targetLeft, callback) {\n\n        var animProps = {},\n            _ = this;\n\n        _.animateHeight();\n\n        if (_.options.rtl === true && _.options.vertical === false) {\n            targetLeft = -targetLeft;\n        }\n        if (_.transformsEnabled === false) {\n            if (_.options.vertical === false) {\n                _.$slideTrack.animate({\n                    left: targetLeft\n                }, _.options.speed, _.options.easing, callback);\n            } else {\n                _.$slideTrack.animate({\n                    top: targetLeft\n                }, _.options.speed, _.options.easing, callback);\n            }\n\n        } else {\n\n            if (_.cssTransitions === false) {\n                if (_.options.rtl === true) {\n                    _.currentLeft = -(_.currentLeft);\n                }\n                $({\n                    animStart: _.currentLeft\n                }).animate({\n                    animStart: targetLeft\n                }, {\n                    duration: _.options.speed,\n                    easing: _.options.easing,\n                    step: function(now) {\n                        now = Math.ceil(now);\n                        if (_.options.vertical === false) {\n                            animProps[_.animType] = 'translate(' +\n                                now + 'px, 0px)';\n                            _.$slideTrack.css(animProps);\n                        } else {\n                            animProps[_.animType] = 'translate(0px,' +\n                                now + 'px)';\n                            _.$slideTrack.css(animProps);\n                        }\n                    },\n                    complete: function() {\n                        if (callback) {\n                            callback.call();\n                        }\n                    }\n                });\n\n            } else {\n\n                _.applyTransition();\n                targetLeft = Math.ceil(targetLeft);\n\n                if (_.options.vertical === false) {\n                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';\n                } else {\n                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';\n                }\n                _.$slideTrack.css(animProps);\n\n                if (callback) {\n                    setTimeout(function() {\n\n                        _.disableTransition();\n\n                        callback.call();\n                    }, _.options.speed);\n                }\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.getNavTarget = function() {\n\n        var _ = this,\n            asNavFor = _.options.asNavFor;\n\n        if ( asNavFor && asNavFor !== null ) {\n            asNavFor = $(asNavFor).not(_.$slider);\n        }\n\n        return asNavFor;\n\n    };\n\n    Slick.prototype.asNavFor = function(index) {\n\n        var _ = this,\n            asNavFor = _.getNavTarget();\n\n        if ( asNavFor !== null && typeof asNavFor === 'object' ) {\n            asNavFor.each(function() {\n                var target = $(this).slick('getSlick');\n                if(!target.unslicked) {\n                    target.slideHandler(index, true);\n                }\n            });\n        }\n\n    };\n\n    Slick.prototype.applyTransition = function(slide) {\n\n        var _ = this,\n            transition = {};\n\n        if (_.options.fade === false) {\n            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;\n        } else {\n            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;\n        }\n\n        if (_.options.fade === false) {\n            _.$slideTrack.css(transition);\n        } else {\n            _.$slides.eq(slide).css(transition);\n        }\n\n    };\n\n    Slick.prototype.autoPlay = function() {\n\n        var _ = this;\n\n        _.autoPlayClear();\n\n        if ( _.slideCount > _.options.slidesToShow ) {\n            _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );\n        }\n\n    };\n\n    Slick.prototype.autoPlayClear = function() {\n\n        var _ = this;\n\n        if (_.autoPlayTimer) {\n            clearInterval(_.autoPlayTimer);\n        }\n\n    };\n\n    Slick.prototype.autoPlayIterator = function() {\n\n        var _ = this,\n            slideTo = _.currentSlide + _.options.slidesToScroll;\n\n        if ( !_.paused && !_.interrupted && !_.focussed ) {\n\n            if ( _.options.infinite === false ) {\n\n                if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {\n                    _.direction = 0;\n                }\n\n                else if ( _.direction === 0 ) {\n\n                    slideTo = _.currentSlide - _.options.slidesToScroll;\n\n                    if ( _.currentSlide - 1 === 0 ) {\n                        _.direction = 1;\n                    }\n\n                }\n\n            }\n\n            _.slideHandler( slideTo );\n\n        }\n\n    };\n\n    Slick.prototype.buildArrows = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true ) {\n\n            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');\n            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');\n\n            if( _.slideCount > _.options.slidesToShow ) {\n\n                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\n                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\n\n                if (_.htmlExpr.test(_.options.prevArrow)) {\n                    _.$prevArrow.prependTo(_.options.appendArrows);\n                }\n\n                if (_.htmlExpr.test(_.options.nextArrow)) {\n                    _.$nextArrow.appendTo(_.options.appendArrows);\n                }\n\n                if (_.options.infinite !== true) {\n                    _.$prevArrow\n                        .addClass('slick-disabled')\n                        .attr('aria-disabled', 'true');\n                }\n\n            } else {\n\n                _.$prevArrow.add( _.$nextArrow )\n\n                    .addClass('slick-hidden')\n                    .attr({\n                        'aria-disabled': 'true',\n                        'tabindex': '-1'\n                    });\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.buildDots = function() {\n\n        var _ = this,\n            i, dot;\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$slider.addClass('slick-dotted');\n\n            dot = $('<ul />').addClass(_.options.dotsClass);\n\n            for (i = 0; i <= _.getDotCount(); i += 1) {\n                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));\n            }\n\n            _.$dots = dot.appendTo(_.options.appendDots);\n\n            _.$dots.find('li').first().addClass('slick-active');\n\n        }\n\n    };\n\n    Slick.prototype.buildOut = function() {\n\n        var _ = this;\n\n        _.$slides =\n            _.$slider\n                .children( _.options.slide + ':not(.slick-cloned)')\n                .addClass('slick-slide');\n\n        _.slideCount = _.$slides.length;\n\n        _.$slides.each(function(index, element) {\n            $(element)\n                .attr('data-slick-index', index)\n                .data('originalStyling', $(element).attr('style') || '');\n        });\n\n        _.$slider.addClass('slick-slider');\n\n        _.$slideTrack = (_.slideCount === 0) ?\n            $('<div class=\"slick-track\"/>').appendTo(_.$slider) :\n            _.$slides.wrapAll('<div class=\"slick-track\"/>').parent();\n\n        _.$list = _.$slideTrack.wrap(\n            '<div class=\"slick-list\"/>').parent();\n        _.$slideTrack.css('opacity', 0);\n\n        if (_.options.centerMode === true || _.options.swipeToSlide === true) {\n            _.options.slidesToScroll = 1;\n        }\n\n        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');\n\n        _.setupInfinite();\n\n        _.buildArrows();\n\n        _.buildDots();\n\n        _.updateDots();\n\n\n        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\n\n        if (_.options.draggable === true) {\n            _.$list.addClass('draggable');\n        }\n\n    };\n\n    Slick.prototype.buildRows = function() {\n\n        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;\n\n        newSlides = document.createDocumentFragment();\n        originalSlides = _.$slider.children();\n\n        if(_.options.rows > 0) {\n\n            slidesPerSection = _.options.slidesPerRow * _.options.rows;\n            numOfSlides = Math.ceil(\n                originalSlides.length / slidesPerSection\n            );\n\n            for(a = 0; a < numOfSlides; a++){\n                var slide = document.createElement('div');\n                for(b = 0; b < _.options.rows; b++) {\n                    var row = document.createElement('div');\n                    for(c = 0; c < _.options.slidesPerRow; c++) {\n                        var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));\n                        if (originalSlides.get(target)) {\n                            row.appendChild(originalSlides.get(target));\n                        }\n                    }\n                    slide.appendChild(row);\n                }\n                newSlides.appendChild(slide);\n            }\n\n            _.$slider.empty().append(newSlides);\n            _.$slider.children().children().children()\n                .css({\n                    'width':(100 / _.options.slidesPerRow) + '%',\n                    'display': 'inline-block'\n                });\n\n        }\n\n    };\n\n    Slick.prototype.checkResponsive = function(initial, forceUpdate) {\n\n        var _ = this,\n            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;\n        var sliderWidth = _.$slider.width();\n        var windowWidth = window.innerWidth || $(window).width();\n\n        if (_.respondTo === 'window') {\n            respondToWidth = windowWidth;\n        } else if (_.respondTo === 'slider') {\n            respondToWidth = sliderWidth;\n        } else if (_.respondTo === 'min') {\n            respondToWidth = Math.min(windowWidth, sliderWidth);\n        }\n\n        if ( _.options.responsive &&\n            _.options.responsive.length &&\n            _.options.responsive !== null) {\n\n            targetBreakpoint = null;\n\n            for (breakpoint in _.breakpoints) {\n                if (_.breakpoints.hasOwnProperty(breakpoint)) {\n                    if (_.originalSettings.mobileFirst === false) {\n                        if (respondToWidth < _.breakpoints[breakpoint]) {\n                            targetBreakpoint = _.breakpoints[breakpoint];\n                        }\n                    } else {\n                        if (respondToWidth > _.breakpoints[breakpoint]) {\n                            targetBreakpoint = _.breakpoints[breakpoint];\n                        }\n                    }\n                }\n            }\n\n            if (targetBreakpoint !== null) {\n                if (_.activeBreakpoint !== null) {\n                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {\n                        _.activeBreakpoint =\n                            targetBreakpoint;\n                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\n                            _.unslick(targetBreakpoint);\n                        } else {\n                            _.options = $.extend({}, _.originalSettings,\n                                _.breakpointSettings[\n                                    targetBreakpoint]);\n                            if (initial === true) {\n                                _.currentSlide = _.options.initialSlide;\n                            }\n                            _.refresh(initial);\n                        }\n                        triggerBreakpoint = targetBreakpoint;\n                    }\n                } else {\n                    _.activeBreakpoint = targetBreakpoint;\n                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\n                        _.unslick(targetBreakpoint);\n                    } else {\n                        _.options = $.extend({}, _.originalSettings,\n                            _.breakpointSettings[\n                                targetBreakpoint]);\n                        if (initial === true) {\n                            _.currentSlide = _.options.initialSlide;\n                        }\n                        _.refresh(initial);\n                    }\n                    triggerBreakpoint = targetBreakpoint;\n                }\n            } else {\n                if (_.activeBreakpoint !== null) {\n                    _.activeBreakpoint = null;\n                    _.options = _.originalSettings;\n                    if (initial === true) {\n                        _.currentSlide = _.options.initialSlide;\n                    }\n                    _.refresh(initial);\n                    triggerBreakpoint = targetBreakpoint;\n                }\n            }\n\n            // only trigger breakpoints during an actual break. not on initialize.\n            if( !initial && triggerBreakpoint !== false ) {\n                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);\n            }\n        }\n\n    };\n\n    Slick.prototype.changeSlide = function(event, dontAnimate) {\n\n        var _ = this,\n            $target = $(event.currentTarget),\n            indexOffset, slideOffset, unevenOffset;\n\n        // If target is a link, prevent default action.\n        if($target.is('a')) {\n            event.preventDefault();\n        }\n\n        // If target is not the <li> element (ie: a child), find the <li>.\n        if(!$target.is('li')) {\n            $target = $target.closest('li');\n        }\n\n        unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);\n        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;\n\n        switch (event.data.message) {\n\n            case 'previous':\n                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;\n                if (_.slideCount > _.options.slidesToShow) {\n                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);\n                }\n                break;\n\n            case 'next':\n                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;\n                if (_.slideCount > _.options.slidesToShow) {\n                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);\n                }\n                break;\n\n            case 'index':\n                var index = event.data.index === 0 ? 0 :\n                    event.data.index || $target.index() * _.options.slidesToScroll;\n\n                _.slideHandler(_.checkNavigable(index), false, dontAnimate);\n                $target.children().trigger('focus');\n                break;\n\n            default:\n                return;\n        }\n\n    };\n\n    Slick.prototype.checkNavigable = function(index) {\n\n        var _ = this,\n            navigables, prevNavigable;\n\n        navigables = _.getNavigableIndexes();\n        prevNavigable = 0;\n        if (index > navigables[navigables.length - 1]) {\n            index = navigables[navigables.length - 1];\n        } else {\n            for (var n in navigables) {\n                if (index < navigables[n]) {\n                    index = prevNavigable;\n                    break;\n                }\n                prevNavigable = navigables[n];\n            }\n        }\n\n        return index;\n    };\n\n    Slick.prototype.cleanUpEvents = function() {\n\n        var _ = this;\n\n        if (_.options.dots && _.$dots !== null) {\n\n            $('li', _.$dots)\n                .off('click.slick', _.changeSlide)\n                .off('mouseenter.slick', $.proxy(_.interrupt, _, true))\n                .off('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n            if (_.options.accessibility === true) {\n                _.$dots.off('keydown.slick', _.keyHandler);\n            }\n        }\n\n        _.$slider.off('focus.slick blur.slick');\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);\n            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);\n\n            if (_.options.accessibility === true) {\n                _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);\n                _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);\n            }\n        }\n\n        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);\n        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);\n        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);\n        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);\n\n        _.$list.off('click.slick', _.clickHandler);\n\n        $(document).off(_.visibilityChange, _.visibility);\n\n        _.cleanUpSlideEvents();\n\n        if (_.options.accessibility === true) {\n            _.$list.off('keydown.slick', _.keyHandler);\n        }\n\n        if (_.options.focusOnSelect === true) {\n            $(_.$slideTrack).children().off('click.slick', _.selectHandler);\n        }\n\n        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);\n\n        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);\n\n        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);\n\n        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);\n\n    };\n\n    Slick.prototype.cleanUpSlideEvents = function() {\n\n        var _ = this;\n\n        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));\n        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n    };\n\n    Slick.prototype.cleanUpRows = function() {\n\n        var _ = this, originalSlides;\n\n        if(_.options.rows > 0) {\n            originalSlides = _.$slides.children().children();\n            originalSlides.removeAttr('style');\n            _.$slider.empty().append(originalSlides);\n        }\n\n    };\n\n    Slick.prototype.clickHandler = function(event) {\n\n        var _ = this;\n\n        if (_.shouldClick === false) {\n            event.stopImmediatePropagation();\n            event.stopPropagation();\n            event.preventDefault();\n        }\n\n    };\n\n    Slick.prototype.destroy = function(refresh) {\n\n        var _ = this;\n\n        _.autoPlayClear();\n\n        _.touchObject = {};\n\n        _.cleanUpEvents();\n\n        $('.slick-cloned', _.$slider).detach();\n\n        if (_.$dots) {\n            _.$dots.remove();\n        }\n\n        if ( _.$prevArrow && _.$prevArrow.length ) {\n\n            _.$prevArrow\n                .removeClass('slick-disabled slick-arrow slick-hidden')\n                .removeAttr('aria-hidden aria-disabled tabindex')\n                .css('display','');\n\n            if ( _.htmlExpr.test( _.options.prevArrow )) {\n                _.$prevArrow.remove();\n            }\n        }\n\n        if ( _.$nextArrow && _.$nextArrow.length ) {\n\n            _.$nextArrow\n                .removeClass('slick-disabled slick-arrow slick-hidden')\n                .removeAttr('aria-hidden aria-disabled tabindex')\n                .css('display','');\n\n            if ( _.htmlExpr.test( _.options.nextArrow )) {\n                _.$nextArrow.remove();\n            }\n        }\n\n\n        if (_.$slides) {\n\n            _.$slides\n                .removeClass('slick-slide slick-active slick-center slick-visible slick-current')\n                .removeAttr('aria-hidden')\n                .removeAttr('data-slick-index')\n                .each(function(){\n                    $(this).attr('style', $(this).data('originalStyling'));\n                });\n\n            _.$slideTrack.children(this.options.slide).detach();\n\n            _.$slideTrack.detach();\n\n            _.$list.detach();\n\n            _.$slider.append(_.$slides);\n        }\n\n        _.cleanUpRows();\n\n        _.$slider.removeClass('slick-slider');\n        _.$slider.removeClass('slick-initialized');\n        _.$slider.removeClass('slick-dotted');\n\n        _.unslicked = true;\n\n        if(!refresh) {\n            _.$slider.trigger('destroy', [_]);\n        }\n\n    };\n\n    Slick.prototype.disableTransition = function(slide) {\n\n        var _ = this,\n            transition = {};\n\n        transition[_.transitionType] = '';\n\n        if (_.options.fade === false) {\n            _.$slideTrack.css(transition);\n        } else {\n            _.$slides.eq(slide).css(transition);\n        }\n\n    };\n\n    Slick.prototype.fadeSlide = function(slideIndex, callback) {\n\n        var _ = this;\n\n        if (_.cssTransitions === false) {\n\n            _.$slides.eq(slideIndex).css({\n                zIndex: _.options.zIndex\n            });\n\n            _.$slides.eq(slideIndex).animate({\n                opacity: 1\n            }, _.options.speed, _.options.easing, callback);\n\n        } else {\n\n            _.applyTransition(slideIndex);\n\n            _.$slides.eq(slideIndex).css({\n                opacity: 1,\n                zIndex: _.options.zIndex\n            });\n\n            if (callback) {\n                setTimeout(function() {\n\n                    _.disableTransition(slideIndex);\n\n                    callback.call();\n                }, _.options.speed);\n            }\n\n        }\n\n    };\n\n    Slick.prototype.fadeSlideOut = function(slideIndex) {\n\n        var _ = this;\n\n        if (_.cssTransitions === false) {\n\n            _.$slides.eq(slideIndex).animate({\n                opacity: 0,\n                zIndex: _.options.zIndex - 2\n            }, _.options.speed, _.options.easing);\n\n        } else {\n\n            _.applyTransition(slideIndex);\n\n            _.$slides.eq(slideIndex).css({\n                opacity: 0,\n                zIndex: _.options.zIndex - 2\n            });\n\n        }\n\n    };\n\n    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {\n\n        var _ = this;\n\n        if (filter !== null) {\n\n            _.$slidesCache = _.$slides;\n\n            _.unload();\n\n            _.$slideTrack.children(this.options.slide).detach();\n\n            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);\n\n            _.reinit();\n\n        }\n\n    };\n\n    Slick.prototype.focusHandler = function() {\n\n        var _ = this;\n\n        _.$slider\n            .off('focus.slick blur.slick')\n            .on('focus.slick blur.slick', '*', function(event) {\n\n            event.stopImmediatePropagation();\n            var $sf = $(this);\n\n            setTimeout(function() {\n\n                if( _.options.pauseOnFocus ) {\n                    _.focussed = $sf.is(':focus');\n                    _.autoPlay();\n                }\n\n            }, 0);\n\n        });\n    };\n\n    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {\n\n        var _ = this;\n        return _.currentSlide;\n\n    };\n\n    Slick.prototype.getDotCount = function() {\n\n        var _ = this;\n\n        var breakPoint = 0;\n        var counter = 0;\n        var pagerQty = 0;\n\n        if (_.options.infinite === true) {\n            if (_.slideCount <= _.options.slidesToShow) {\n                 ++pagerQty;\n            } else {\n                while (breakPoint < _.slideCount) {\n                    ++pagerQty;\n                    breakPoint = counter + _.options.slidesToScroll;\n                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n                }\n            }\n        } else if (_.options.centerMode === true) {\n            pagerQty = _.slideCount;\n        } else if(!_.options.asNavFor) {\n            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);\n        }else {\n            while (breakPoint < _.slideCount) {\n                ++pagerQty;\n                breakPoint = counter + _.options.slidesToScroll;\n                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n            }\n        }\n\n        return pagerQty - 1;\n\n    };\n\n    Slick.prototype.getLeft = function(slideIndex) {\n\n        var _ = this,\n            targetLeft,\n            verticalHeight,\n            verticalOffset = 0,\n            targetSlide,\n            coef;\n\n        _.slideOffset = 0;\n        verticalHeight = _.$slides.first().outerHeight(true);\n\n        if (_.options.infinite === true) {\n            if (_.slideCount > _.options.slidesToShow) {\n                _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;\n                coef = -1\n\n                if (_.options.vertical === true && _.options.centerMode === true) {\n                    if (_.options.slidesToShow === 2) {\n                        coef = -1.5;\n                    } else if (_.options.slidesToShow === 1) {\n                        coef = -2\n                    }\n                }\n                verticalOffset = (verticalHeight * _.options.slidesToShow) * coef;\n            }\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\n                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {\n                    if (slideIndex > _.slideCount) {\n                        _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;\n                        verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;\n                    } else {\n                        _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;\n                        verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;\n                    }\n                }\n            }\n        } else {\n            if (slideIndex + _.options.slidesToShow > _.slideCount) {\n                _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;\n                verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;\n            }\n        }\n\n        if (_.slideCount <= _.options.slidesToShow) {\n            _.slideOffset = 0;\n            verticalOffset = 0;\n        }\n\n        if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {\n            _.slideOffset = ((_.slideWidth * Math.floor(_.options.slidesToShow)) / 2) - ((_.slideWidth * _.slideCount) / 2);\n        } else if (_.options.centerMode === true && _.options.infinite === true) {\n            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;\n        } else if (_.options.centerMode === true) {\n            _.slideOffset = 0;\n            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);\n        }\n\n        if (_.options.vertical === false) {\n            targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;\n        } else {\n            targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;\n        }\n\n        if (_.options.variableWidth === true) {\n\n            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\n                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\n            } else {\n                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);\n            }\n\n            if (_.options.rtl === true) {\n                if (targetSlide[0]) {\n                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\n                } else {\n                    targetLeft =  0;\n                }\n            } else {\n                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\n            }\n\n            if (_.options.centerMode === true) {\n                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\n                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\n                } else {\n                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);\n                }\n\n                if (_.options.rtl === true) {\n                    if (targetSlide[0]) {\n                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\n                    } else {\n                        targetLeft =  0;\n                    }\n                } else {\n                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\n                }\n\n                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;\n            }\n        }\n\n        return targetLeft;\n\n    };\n\n    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {\n\n        var _ = this;\n\n        return _.options[option];\n\n    };\n\n    Slick.prototype.getNavigableIndexes = function() {\n\n        var _ = this,\n            breakPoint = 0,\n            counter = 0,\n            indexes = [],\n            max;\n\n        if (_.options.infinite === false) {\n            max = _.slideCount;\n        } else {\n            breakPoint = _.options.slidesToScroll * -1;\n            counter = _.options.slidesToScroll * -1;\n            max = _.slideCount * 2;\n        }\n\n        while (breakPoint < max) {\n            indexes.push(breakPoint);\n            breakPoint = counter + _.options.slidesToScroll;\n            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n        }\n\n        return indexes;\n\n    };\n\n    Slick.prototype.getSlick = function() {\n\n        return this;\n\n    };\n\n    Slick.prototype.getSlideCount = function() {\n\n        var _ = this,\n            slidesTraversed, swipedSlide, centerOffset;\n\n        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;\n\n        if (_.options.swipeToSlide === true) {\n            _.$slideTrack.find('.slick-slide').each(function(index, slide) {\n                if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {\n                    swipedSlide = slide;\n                    return false;\n                }\n            });\n\n            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;\n\n            return slidesTraversed;\n\n        } else {\n            return _.options.slidesToScroll;\n        }\n\n    };\n\n    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {\n\n        var _ = this;\n\n        _.changeSlide({\n            data: {\n                message: 'index',\n                index: parseInt(slide)\n            }\n        }, dontAnimate);\n\n    };\n\n    Slick.prototype.init = function(creation) {\n\n        var _ = this;\n\n        if (!$(_.$slider).hasClass('slick-initialized')) {\n\n            $(_.$slider).addClass('slick-initialized');\n\n            _.buildRows();\n            _.buildOut();\n            _.setProps();\n            _.startLoad();\n            _.loadSlider();\n            _.initializeEvents();\n            _.updateArrows();\n            _.updateDots();\n            _.checkResponsive(true);\n            _.focusHandler();\n\n        }\n\n        if (creation) {\n            _.$slider.trigger('init', [_]);\n        }\n\n        if (_.options.accessibility === true) {\n            _.initADA();\n        }\n\n        if ( _.options.autoplay ) {\n\n            _.paused = false;\n            _.autoPlay();\n\n        }\n\n    };\n\n    Slick.prototype.initADA = function() {\n        var _ = this,\n                numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),\n                tabControlIndexes = _.getNavigableIndexes().filter(function(val) {\n                    return (val >= 0) && (val < _.slideCount);\n                });\n\n        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({\n            'aria-hidden': 'true',\n            'tabindex': '-1'\n        }).find('a, input, button, select').attr({\n            'tabindex': '-1'\n        });\n\n        if (_.$dots !== null) {\n            _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {\n                var slideControlIndex = tabControlIndexes.indexOf(i);\n\n                $(this).attr({\n                    'role': 'tabpanel',\n                    'id': 'slick-slide' + _.instanceUid + i,\n                    'tabindex': -1\n                });\n\n                if (slideControlIndex !== -1) {\n                   var ariaButtonControl = 'slick-slide-control' + _.instanceUid + slideControlIndex\n                   if ($('#' + ariaButtonControl).length) {\n                     $(this).attr({\n                         'aria-describedby': ariaButtonControl\n                     });\n                   }\n                }\n            });\n\n            _.$dots.attr('role', 'tablist').find('li').each(function(i) {\n                var mappedSlideIndex = tabControlIndexes[i];\n\n                $(this).attr({\n                    'role': 'presentation'\n                });\n\n                $(this).find('button').first().attr({\n                    'role': 'tab',\n                    'id': 'slick-slide-control' + _.instanceUid + i,\n                    'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,\n                    'aria-label': (i + 1) + ' of ' + numDotGroups,\n                    'aria-selected': null,\n                    'tabindex': '-1'\n                });\n\n            }).eq(_.currentSlide).find('button').attr({\n                'aria-selected': 'true',\n                'tabindex': '0'\n            }).end();\n        }\n\n        for (var i=_.currentSlide, max=i+_.options.slidesToShow; i < max; i++) {\n          if (_.options.focusOnChange) {\n            _.$slides.eq(i).attr({'tabindex': '0'});\n          } else {\n            _.$slides.eq(i).removeAttr('tabindex');\n          }\n        }\n\n        _.activateADA();\n\n    };\n\n    Slick.prototype.initArrowEvents = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n            _.$prevArrow\n               .off('click.slick')\n               .on('click.slick', {\n                    message: 'previous'\n               }, _.changeSlide);\n            _.$nextArrow\n               .off('click.slick')\n               .on('click.slick', {\n                    message: 'next'\n               }, _.changeSlide);\n\n            if (_.options.accessibility === true) {\n                _.$prevArrow.on('keydown.slick', _.keyHandler);\n                _.$nextArrow.on('keydown.slick', _.keyHandler);\n            }\n        }\n\n    };\n\n    Slick.prototype.initDotEvents = function() {\n\n        var _ = this;\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n            $('li', _.$dots).on('click.slick', {\n                message: 'index'\n            }, _.changeSlide);\n\n            if (_.options.accessibility === true) {\n                _.$dots.on('keydown.slick', _.keyHandler);\n            }\n        }\n\n        if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.slideCount > _.options.slidesToShow) {\n\n            $('li', _.$dots)\n                .on('mouseenter.slick', $.proxy(_.interrupt, _, true))\n                .on('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n        }\n\n    };\n\n    Slick.prototype.initSlideEvents = function() {\n\n        var _ = this;\n\n        if ( _.options.pauseOnHover ) {\n\n            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));\n            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n        }\n\n    };\n\n    Slick.prototype.initializeEvents = function() {\n\n        var _ = this;\n\n        _.initArrowEvents();\n\n        _.initDotEvents();\n        _.initSlideEvents();\n\n        _.$list.on('touchstart.slick mousedown.slick', {\n            action: 'start'\n        }, _.swipeHandler);\n        _.$list.on('touchmove.slick mousemove.slick', {\n            action: 'move'\n        }, _.swipeHandler);\n        _.$list.on('touchend.slick mouseup.slick', {\n            action: 'end'\n        }, _.swipeHandler);\n        _.$list.on('touchcancel.slick mouseleave.slick', {\n            action: 'end'\n        }, _.swipeHandler);\n\n        _.$list.on('click.slick', _.clickHandler);\n\n        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));\n\n        if (_.options.accessibility === true) {\n            _.$list.on('keydown.slick', _.keyHandler);\n        }\n\n        if (_.options.focusOnSelect === true) {\n            $(_.$slideTrack).children().on('click.slick', _.selectHandler);\n        }\n\n        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));\n\n        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));\n\n        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);\n\n        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);\n        $(_.setPosition);\n\n    };\n\n    Slick.prototype.initUI = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$prevArrow.show();\n            _.$nextArrow.show();\n\n        }\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$dots.show();\n\n        }\n\n    };\n\n    Slick.prototype.keyHandler = function(event) {\n\n        var _ = this;\n         //Dont slide if the cursor is inside the form fields and arrow keys are pressed\n        if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {\n            if (event.keyCode === 37 && _.options.accessibility === true) {\n                _.changeSlide({\n                    data: {\n                        message: _.options.rtl === true ? 'next' :  'previous'\n                    }\n                });\n            } else if (event.keyCode === 39 && _.options.accessibility === true) {\n                _.changeSlide({\n                    data: {\n                        message: _.options.rtl === true ? 'previous' : 'next'\n                    }\n                });\n            }\n        }\n\n    };\n\n    Slick.prototype.lazyLoad = function() {\n\n        var _ = this,\n            loadRange, cloneRange, rangeStart, rangeEnd;\n\n        function loadImages(imagesScope) {\n\n            $('img[data-lazy]', imagesScope).each(function() {\n\n                var image = $(this),\n                    imageSource = $(this).attr('data-lazy'),\n                    imageSrcSet = $(this).attr('data-srcset'),\n                    imageSizes  = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),\n                    imageToLoad = document.createElement('img');\n\n                imageToLoad.onload = function() {\n\n                    image\n                        .animate({ opacity: 0 }, 100, function() {\n\n                            if (imageSrcSet) {\n                                image\n                                    .attr('srcset', imageSrcSet );\n\n                                if (imageSizes) {\n                                    image\n                                        .attr('sizes', imageSizes );\n                                }\n                            }\n\n                            image\n                                .attr('src', imageSource)\n                                .animate({ opacity: 1 }, 200, function() {\n                                    image\n                                        .removeAttr('data-lazy data-srcset data-sizes')\n                                        .removeClass('slick-loading');\n                                });\n                            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);\n                        });\n\n                };\n\n                imageToLoad.onerror = function() {\n\n                    image\n                        .removeAttr( 'data-lazy' )\n                        .removeClass( 'slick-loading' )\n                        .addClass( 'slick-lazyload-error' );\n\n                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);\n\n                };\n\n                imageToLoad.src = imageSource;\n\n            });\n\n        }\n\n        if (_.options.centerMode === true) {\n            if (_.options.infinite === true) {\n                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);\n                rangeEnd = rangeStart + _.options.slidesToShow + 2;\n            } else {\n                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));\n                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;\n            }\n        } else {\n            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;\n            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);\n            if (_.options.fade === true) {\n                if (rangeStart > 0) rangeStart--;\n                if (rangeEnd <= _.slideCount) rangeEnd++;\n            }\n        }\n\n        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);\n\n        if (_.options.lazyLoad === 'anticipated') {\n            var prevSlide = rangeStart - 1,\n                nextSlide = rangeEnd,\n                $slides = _.$slider.find('.slick-slide');\n\n            for (var i = 0; i < _.options.slidesToScroll; i++) {\n                if (prevSlide < 0) prevSlide = _.slideCount - 1;\n                loadRange = loadRange.add($slides.eq(prevSlide));\n                loadRange = loadRange.add($slides.eq(nextSlide));\n                prevSlide--;\n                nextSlide++;\n            }\n        }\n\n        loadImages(loadRange);\n\n        if (_.slideCount <= _.options.slidesToShow) {\n            cloneRange = _.$slider.find('.slick-slide');\n            loadImages(cloneRange);\n        } else\n        if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {\n            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);\n            loadImages(cloneRange);\n        } else if (_.currentSlide === 0) {\n            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);\n            loadImages(cloneRange);\n        }\n\n    };\n\n    Slick.prototype.loadSlider = function() {\n\n        var _ = this;\n\n        _.setPosition();\n\n        _.$slideTrack.css({\n            opacity: 1\n        });\n\n        _.$slider.removeClass('slick-loading');\n\n        _.initUI();\n\n        if (_.options.lazyLoad === 'progressive') {\n            _.progressiveLazyLoad();\n        }\n\n    };\n\n    Slick.prototype.next = Slick.prototype.slickNext = function() {\n\n        var _ = this;\n\n        _.changeSlide({\n            data: {\n                message: 'next'\n            }\n        });\n\n    };\n\n    Slick.prototype.orientationChange = function() {\n\n        var _ = this;\n\n        _.checkResponsive();\n        _.setPosition();\n\n    };\n\n    Slick.prototype.pause = Slick.prototype.slickPause = function() {\n\n        var _ = this;\n\n        _.autoPlayClear();\n        _.paused = true;\n\n    };\n\n    Slick.prototype.play = Slick.prototype.slickPlay = function() {\n\n        var _ = this;\n\n        _.autoPlay();\n        _.options.autoplay = true;\n        _.paused = false;\n        _.focussed = false;\n        _.interrupted = false;\n\n    };\n\n    Slick.prototype.postSlide = function(index) {\n\n        var _ = this;\n\n        if( !_.unslicked ) {\n\n            _.$slider.trigger('afterChange', [_, index]);\n\n            _.animating = false;\n\n            if (_.slideCount > _.options.slidesToShow) {\n                _.setPosition();\n            }\n\n            _.swipeLeft = null;\n\n            if ( _.options.autoplay ) {\n                _.autoPlay();\n            }\n\n            if (_.options.accessibility === true) {\n                _.initADA();\n\n                if (_.options.focusOnChange) {\n                    var $currentSlide = $(_.$slides.get(_.currentSlide));\n                    $currentSlide.attr('tabindex', 0).focus();\n                }\n            }\n\n        }\n\n    };\n\n    Slick.prototype.prev = Slick.prototype.slickPrev = function() {\n\n        var _ = this;\n\n        _.changeSlide({\n            data: {\n                message: 'previous'\n            }\n        });\n\n    };\n\n    Slick.prototype.preventDefault = function(event) {\n\n        event.preventDefault();\n\n    };\n\n    Slick.prototype.progressiveLazyLoad = function( tryCount ) {\n\n        tryCount = tryCount || 1;\n\n        var _ = this,\n            $imgsToLoad = $( 'img[data-lazy]', _.$slider ),\n            image,\n            imageSource,\n            imageSrcSet,\n            imageSizes,\n            imageToLoad;\n\n        if ( $imgsToLoad.length ) {\n\n            image = $imgsToLoad.first();\n            imageSource = image.attr('data-lazy');\n            imageSrcSet = image.attr('data-srcset');\n            imageSizes  = image.attr('data-sizes') || _.$slider.attr('data-sizes');\n            imageToLoad = document.createElement('img');\n\n            imageToLoad.onload = function() {\n\n                if (imageSrcSet) {\n                    image\n                        .attr('srcset', imageSrcSet );\n\n                    if (imageSizes) {\n                        image\n                            .attr('sizes', imageSizes );\n                    }\n                }\n\n                image\n                    .attr( 'src', imageSource )\n                    .removeAttr('data-lazy data-srcset data-sizes')\n                    .removeClass('slick-loading');\n\n                if ( _.options.adaptiveHeight === true ) {\n                    _.setPosition();\n                }\n\n                _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);\n                _.progressiveLazyLoad();\n\n            };\n\n            imageToLoad.onerror = function() {\n\n                if ( tryCount < 3 ) {\n\n                    /**\n                     * try to load the image 3 times,\n                     * leave a slight delay so we don't get\n                     * servers blocking the request.\n                     */\n                    setTimeout( function() {\n                        _.progressiveLazyLoad( tryCount + 1 );\n                    }, 500 );\n\n                } else {\n\n                    image\n                        .removeAttr( 'data-lazy' )\n                        .removeClass( 'slick-loading' )\n                        .addClass( 'slick-lazyload-error' );\n\n                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);\n\n                    _.progressiveLazyLoad();\n\n                }\n\n            };\n\n            imageToLoad.src = imageSource;\n\n        } else {\n\n            _.$slider.trigger('allImagesLoaded', [ _ ]);\n\n        }\n\n    };\n\n    Slick.prototype.refresh = function( initializing ) {\n\n        var _ = this, currentSlide, lastVisibleIndex;\n\n        lastVisibleIndex = _.slideCount - _.options.slidesToShow;\n\n        // in non-infinite sliders, we don't want to go past the\n        // last visible index.\n        if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {\n            _.currentSlide = lastVisibleIndex;\n        }\n\n        // if less slides than to show, go to start.\n        if ( _.slideCount <= _.options.slidesToShow ) {\n            _.currentSlide = 0;\n\n        }\n\n        currentSlide = _.currentSlide;\n\n        _.destroy(true);\n\n        $.extend(_, _.initials, { currentSlide: currentSlide });\n\n        _.init();\n\n        if( !initializing ) {\n\n            _.changeSlide({\n                data: {\n                    message: 'index',\n                    index: currentSlide\n                }\n            }, false);\n\n        }\n\n    };\n\n    Slick.prototype.registerBreakpoints = function() {\n\n        var _ = this, breakpoint, currentBreakpoint, l,\n            responsiveSettings = _.options.responsive || null;\n\n        if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {\n\n            _.respondTo = _.options.respondTo || 'window';\n\n            for ( breakpoint in responsiveSettings ) {\n\n                l = _.breakpoints.length-1;\n\n                if (responsiveSettings.hasOwnProperty(breakpoint)) {\n                    currentBreakpoint = responsiveSettings[breakpoint].breakpoint;\n\n                    // loop through the breakpoints and cut out any existing\n                    // ones with the same breakpoint number, we don't want dupes.\n                    while( l >= 0 ) {\n                        if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {\n                            _.breakpoints.splice(l,1);\n                        }\n                        l--;\n                    }\n\n                    _.breakpoints.push(currentBreakpoint);\n                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;\n\n                }\n\n            }\n\n            _.breakpoints.sort(function(a, b) {\n                return ( _.options.mobileFirst ) ? a-b : b-a;\n            });\n\n        }\n\n    };\n\n    Slick.prototype.reinit = function() {\n\n        var _ = this;\n\n        _.$slides =\n            _.$slideTrack\n                .children(_.options.slide)\n                .addClass('slick-slide');\n\n        _.slideCount = _.$slides.length;\n\n        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {\n            _.currentSlide = _.currentSlide - _.options.slidesToScroll;\n        }\n\n        if (_.slideCount <= _.options.slidesToShow) {\n            _.currentSlide = 0;\n        }\n\n        _.registerBreakpoints();\n\n        _.setProps();\n        _.setupInfinite();\n        _.buildArrows();\n        _.updateArrows();\n        _.initArrowEvents();\n        _.buildDots();\n        _.updateDots();\n        _.initDotEvents();\n        _.cleanUpSlideEvents();\n        _.initSlideEvents();\n\n        _.checkResponsive(false, true);\n\n        if (_.options.focusOnSelect === true) {\n            $(_.$slideTrack).children().on('click.slick', _.selectHandler);\n        }\n\n        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\n\n        _.setPosition();\n        _.focusHandler();\n\n        _.paused = !_.options.autoplay;\n        _.autoPlay();\n\n        _.$slider.trigger('reInit', [_]);\n\n    };\n\n    Slick.prototype.resize = function() {\n\n        var _ = this;\n\n        if ($(window).width() !== _.windowWidth) {\n            clearTimeout(_.windowDelay);\n            _.windowDelay = window.setTimeout(function() {\n                _.windowWidth = $(window).width();\n                _.checkResponsive();\n                if( !_.unslicked ) { _.setPosition(); }\n            }, 50);\n        }\n    };\n\n    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {\n\n        var _ = this;\n\n        if (typeof(index) === 'boolean') {\n            removeBefore = index;\n            index = removeBefore === true ? 0 : _.slideCount - 1;\n        } else {\n            index = removeBefore === true ? --index : index;\n        }\n\n        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {\n            return false;\n        }\n\n        _.unload();\n\n        if (removeAll === true) {\n            _.$slideTrack.children().remove();\n        } else {\n            _.$slideTrack.children(this.options.slide).eq(index).remove();\n        }\n\n        _.$slides = _.$slideTrack.children(this.options.slide);\n\n        _.$slideTrack.children(this.options.slide).detach();\n\n        _.$slideTrack.append(_.$slides);\n\n        _.$slidesCache = _.$slides;\n\n        _.reinit();\n\n    };\n\n    Slick.prototype.setCSS = function(position) {\n\n        var _ = this,\n            positionProps = {},\n            x, y;\n\n        if (_.options.rtl === true) {\n            position = -position;\n        }\n        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';\n        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';\n\n        positionProps[_.positionProp] = position;\n\n        if (_.transformsEnabled === false) {\n            _.$slideTrack.css(positionProps);\n        } else {\n            positionProps = {};\n            if (_.cssTransitions === false) {\n                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';\n                _.$slideTrack.css(positionProps);\n            } else {\n                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';\n                _.$slideTrack.css(positionProps);\n            }\n        }\n\n    };\n\n    Slick.prototype.setDimensions = function() {\n\n        var _ = this;\n\n        if (_.options.vertical === false) {\n            if (_.options.centerMode === true) {\n                _.$list.css({\n                    padding: ('0px ' + _.options.centerPadding)\n                });\n            }\n        } else {\n            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);\n            if (_.options.centerMode === true) {\n                _.$list.css({\n                    padding: (_.options.centerPadding + ' 0px')\n                });\n            }\n        }\n\n        _.listWidth = _.$list.width();\n        _.listHeight = _.$list.height();\n\n\n        if (_.options.vertical === false && _.options.variableWidth === false) {\n            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);\n            _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));\n\n        } else if (_.options.variableWidth === true) {\n            _.$slideTrack.width(5000 * _.slideCount);\n        } else {\n            _.slideWidth = Math.ceil(_.listWidth);\n            _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));\n        }\n\n        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();\n        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);\n\n    };\n\n    Slick.prototype.setFade = function() {\n\n        var _ = this,\n            targetLeft;\n\n        _.$slides.each(function(index, element) {\n            targetLeft = (_.slideWidth * index) * -1;\n            if (_.options.rtl === true) {\n                $(element).css({\n                    position: 'relative',\n                    right: targetLeft,\n                    top: 0,\n                    zIndex: _.options.zIndex - 2,\n                    opacity: 0\n                });\n            } else {\n                $(element).css({\n                    position: 'relative',\n                    left: targetLeft,\n                    top: 0,\n                    zIndex: _.options.zIndex - 2,\n                    opacity: 0\n                });\n            }\n        });\n\n        _.$slides.eq(_.currentSlide).css({\n            zIndex: _.options.zIndex - 1,\n            opacity: 1\n        });\n\n    };\n\n    Slick.prototype.setHeight = function() {\n\n        var _ = this;\n\n        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\n            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\n            _.$list.css('height', targetHeight);\n        }\n\n    };\n\n    Slick.prototype.setOption =\n    Slick.prototype.slickSetOption = function() {\n\n        /**\n         * accepts arguments in format of:\n         *\n         *  - for changing a single option's value:\n         *     .slick(\"setOption\", option, value, refresh )\n         *\n         *  - for changing a set of responsive options:\n         *     .slick(\"setOption\", 'responsive', [{}, ...], refresh )\n         *\n         *  - for updating multiple values at once (not responsive)\n         *     .slick(\"setOption\", { 'option': value, ... }, refresh )\n         */\n\n        var _ = this, l, item, option, value, refresh = false, type;\n\n        if( $.type( arguments[0] ) === 'object' ) {\n\n            option =  arguments[0];\n            refresh = arguments[1];\n            type = 'multiple';\n\n        } else if ( $.type( arguments[0] ) === 'string' ) {\n\n            option =  arguments[0];\n            value = arguments[1];\n            refresh = arguments[2];\n\n            if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {\n\n                type = 'responsive';\n\n            } else if ( typeof arguments[1] !== 'undefined' ) {\n\n                type = 'single';\n\n            }\n\n        }\n\n        if ( type === 'single' ) {\n\n            _.options[option] = value;\n\n\n        } else if ( type === 'multiple' ) {\n\n            $.each( option , function( opt, val ) {\n\n                _.options[opt] = val;\n\n            });\n\n\n        } else if ( type === 'responsive' ) {\n\n            for ( item in value ) {\n\n                if( $.type( _.options.responsive ) !== 'array' ) {\n\n                    _.options.responsive = [ value[item] ];\n\n                } else {\n\n                    l = _.options.responsive.length-1;\n\n                    // loop through the responsive object and splice out duplicates.\n                    while( l >= 0 ) {\n\n                        if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {\n\n                            _.options.responsive.splice(l,1);\n\n                        }\n\n                        l--;\n\n                    }\n\n                    _.options.responsive.push( value[item] );\n\n                }\n\n            }\n\n        }\n\n        if ( refresh ) {\n\n            _.unload();\n            _.reinit();\n\n        }\n\n    };\n\n    Slick.prototype.setPosition = function() {\n\n        var _ = this;\n\n        _.setDimensions();\n\n        _.setHeight();\n\n        if (_.options.fade === false) {\n            _.setCSS(_.getLeft(_.currentSlide));\n        } else {\n            _.setFade();\n        }\n\n        _.$slider.trigger('setPosition', [_]);\n\n    };\n\n    Slick.prototype.setProps = function() {\n\n        var _ = this,\n            bodyStyle = document.body.style;\n\n        _.positionProp = _.options.vertical === true ? 'top' : 'left';\n\n        if (_.positionProp === 'top') {\n            _.$slider.addClass('slick-vertical');\n        } else {\n            _.$slider.removeClass('slick-vertical');\n        }\n\n        if (bodyStyle.WebkitTransition !== undefined ||\n            bodyStyle.MozTransition !== undefined ||\n            bodyStyle.msTransition !== undefined) {\n            if (_.options.useCSS === true) {\n                _.cssTransitions = true;\n            }\n        }\n\n        if ( _.options.fade ) {\n            if ( typeof _.options.zIndex === 'number' ) {\n                if( _.options.zIndex < 3 ) {\n                    _.options.zIndex = 3;\n                }\n            } else {\n                _.options.zIndex = _.defaults.zIndex;\n            }\n        }\n\n        if (bodyStyle.OTransform !== undefined) {\n            _.animType = 'OTransform';\n            _.transformType = '-o-transform';\n            _.transitionType = 'OTransition';\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\n        }\n        if (bodyStyle.MozTransform !== undefined) {\n            _.animType = 'MozTransform';\n            _.transformType = '-moz-transform';\n            _.transitionType = 'MozTransition';\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;\n        }\n        if (bodyStyle.webkitTransform !== undefined) {\n            _.animType = 'webkitTransform';\n            _.transformType = '-webkit-transform';\n            _.transitionType = 'webkitTransition';\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\n        }\n        if (bodyStyle.msTransform !== undefined) {\n            _.animType = 'msTransform';\n            _.transformType = '-ms-transform';\n            _.transitionType = 'msTransition';\n            if (bodyStyle.msTransform === undefined) _.animType = false;\n        }\n        if (bodyStyle.transform !== undefined && _.animType !== false) {\n            _.animType = 'transform';\n            _.transformType = 'transform';\n            _.transitionType = 'transition';\n        }\n        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);\n    };\n\n\n    Slick.prototype.setSlideClasses = function(index) {\n\n        var _ = this,\n            centerOffset, allSlides, indexOffset, remainder;\n\n        allSlides = _.$slider\n            .find('.slick-slide')\n            .removeClass('slick-active slick-center slick-current')\n            .attr('aria-hidden', 'true');\n\n        _.$slides\n            .eq(index)\n            .addClass('slick-current');\n\n        if (_.options.centerMode === true) {\n\n            var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;\n\n            centerOffset = Math.floor(_.options.slidesToShow / 2);\n\n            if (_.options.infinite === true) {\n\n                if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {\n                    _.$slides\n                        .slice(index - centerOffset + evenCoef, index + centerOffset + 1)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                } else {\n\n                    indexOffset = _.options.slidesToShow + index;\n                    allSlides\n                        .slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                }\n\n                if (index === 0) {\n\n                    allSlides\n                        .eq(allSlides.length - 1 - _.options.slidesToShow)\n                        .addClass('slick-center');\n\n                } else if (index === _.slideCount - 1) {\n\n                    allSlides\n                        .eq(_.options.slidesToShow)\n                        .addClass('slick-center');\n\n                }\n\n            }\n\n            _.$slides\n                .eq(index)\n                .addClass('slick-center');\n\n        } else {\n\n            if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {\n\n                _.$slides\n                    .slice(index, index + _.options.slidesToShow)\n                    .addClass('slick-active')\n                    .attr('aria-hidden', 'false');\n\n            } else if (allSlides.length <= _.options.slidesToShow) {\n\n                allSlides\n                    .addClass('slick-active')\n                    .attr('aria-hidden', 'false');\n\n            } else {\n\n                remainder = _.slideCount % _.options.slidesToShow;\n                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;\n\n                if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {\n\n                    allSlides\n                        .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                } else {\n\n                    allSlides\n                        .slice(indexOffset, indexOffset + _.options.slidesToShow)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                }\n\n            }\n\n        }\n\n        if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {\n            _.lazyLoad();\n        }\n    };\n\n    Slick.prototype.setupInfinite = function() {\n\n        var _ = this,\n            i, slideIndex, infiniteCount;\n\n        if (_.options.fade === true) {\n            _.options.centerMode = false;\n        }\n\n        if (_.options.infinite === true && _.options.fade === false) {\n\n            slideIndex = null;\n\n            if (_.slideCount > _.options.slidesToShow) {\n\n                if (_.options.centerMode === true) {\n                    infiniteCount = _.options.slidesToShow + 1;\n                } else {\n                    infiniteCount = _.options.slidesToShow;\n                }\n\n                for (i = _.slideCount; i > (_.slideCount -\n                        infiniteCount); i -= 1) {\n                    slideIndex = i - 1;\n                    $(_.$slides[slideIndex]).clone(true).attr('id', '')\n                        .attr('data-slick-index', slideIndex - _.slideCount)\n                        .prependTo(_.$slideTrack).addClass('slick-cloned');\n                }\n                for (i = 0; i < infiniteCount  + _.slideCount; i += 1) {\n                    slideIndex = i;\n                    $(_.$slides[slideIndex]).clone(true).attr('id', '')\n                        .attr('data-slick-index', slideIndex + _.slideCount)\n                        .appendTo(_.$slideTrack).addClass('slick-cloned');\n                }\n                _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {\n                    $(this).attr('id', '');\n                });\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.interrupt = function( toggle ) {\n\n        var _ = this;\n\n        if( !toggle ) {\n            _.autoPlay();\n        }\n        _.interrupted = toggle;\n\n    };\n\n    Slick.prototype.selectHandler = function(event) {\n\n        var _ = this;\n\n        var targetElement =\n            $(event.target).is('.slick-slide') ?\n                $(event.target) :\n                $(event.target).parents('.slick-slide');\n\n        var index = parseInt(targetElement.attr('data-slick-index'));\n\n        if (!index) index = 0;\n\n        if (_.slideCount <= _.options.slidesToShow) {\n\n            _.slideHandler(index, false, true);\n            return;\n\n        }\n\n        _.slideHandler(index);\n\n    };\n\n    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {\n\n        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,\n            _ = this, navTarget;\n\n        sync = sync || false;\n\n        if (_.animating === true && _.options.waitForAnimate === true) {\n            return;\n        }\n\n        if (_.options.fade === true && _.currentSlide === index) {\n            return;\n        }\n\n        if (sync === false) {\n            _.asNavFor(index);\n        }\n\n        targetSlide = index;\n        targetLeft = _.getLeft(targetSlide);\n        slideLeft = _.getLeft(_.currentSlide);\n\n        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;\n\n        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {\n            if (_.options.fade === false) {\n                targetSlide = _.currentSlide;\n                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\n                    _.animateSlide(slideLeft, function() {\n                        _.postSlide(targetSlide);\n                    });\n                } else {\n                    _.postSlide(targetSlide);\n                }\n            }\n            return;\n        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {\n            if (_.options.fade === false) {\n                targetSlide = _.currentSlide;\n                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\n                    _.animateSlide(slideLeft, function() {\n                        _.postSlide(targetSlide);\n                    });\n                } else {\n                    _.postSlide(targetSlide);\n                }\n            }\n            return;\n        }\n\n        if ( _.options.autoplay ) {\n            clearInterval(_.autoPlayTimer);\n        }\n\n        if (targetSlide < 0) {\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\n                animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);\n            } else {\n                animSlide = _.slideCount + targetSlide;\n            }\n        } else if (targetSlide >= _.slideCount) {\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\n                animSlide = 0;\n            } else {\n                animSlide = targetSlide - _.slideCount;\n            }\n        } else {\n            animSlide = targetSlide;\n        }\n\n        _.animating = true;\n\n        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);\n\n        oldSlide = _.currentSlide;\n        _.currentSlide = animSlide;\n\n        _.setSlideClasses(_.currentSlide);\n\n        if ( _.options.asNavFor ) {\n\n            navTarget = _.getNavTarget();\n            navTarget = navTarget.slick('getSlick');\n\n            if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {\n                navTarget.setSlideClasses(_.currentSlide);\n            }\n\n        }\n\n        _.updateDots();\n        _.updateArrows();\n\n        if (_.options.fade === true) {\n            if (dontAnimate !== true) {\n\n                _.fadeSlideOut(oldSlide);\n\n                _.fadeSlide(animSlide, function() {\n                    _.postSlide(animSlide);\n                });\n\n            } else {\n                _.postSlide(animSlide);\n            }\n            _.animateHeight();\n            return;\n        }\n\n        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\n            _.animateSlide(targetLeft, function() {\n                _.postSlide(animSlide);\n            });\n        } else {\n            _.postSlide(animSlide);\n        }\n\n    };\n\n    Slick.prototype.startLoad = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$prevArrow.hide();\n            _.$nextArrow.hide();\n\n        }\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$dots.hide();\n\n        }\n\n        _.$slider.addClass('slick-loading');\n\n    };\n\n    Slick.prototype.swipeDirection = function() {\n\n        var xDist, yDist, r, swipeAngle, _ = this;\n\n        xDist = _.touchObject.startX - _.touchObject.curX;\n        yDist = _.touchObject.startY - _.touchObject.curY;\n        r = Math.atan2(yDist, xDist);\n\n        swipeAngle = Math.round(r * 180 / Math.PI);\n        if (swipeAngle < 0) {\n            swipeAngle = 360 - Math.abs(swipeAngle);\n        }\n\n        if ((swipeAngle <= 45) && (swipeAngle >= 0)) {\n            return (_.options.rtl === false ? 'left' : 'right');\n        }\n        if ((swipeAngle <= 360) && (swipeAngle >= 315)) {\n            return (_.options.rtl === false ? 'left' : 'right');\n        }\n        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {\n            return (_.options.rtl === false ? 'right' : 'left');\n        }\n        if (_.options.verticalSwiping === true) {\n            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {\n                return 'down';\n            } else {\n                return 'up';\n            }\n        }\n\n        return 'vertical';\n\n    };\n\n    Slick.prototype.swipeEnd = function(event) {\n\n        var _ = this,\n            slideCount,\n            direction;\n\n        _.dragging = false;\n        _.swiping = false;\n\n        if (_.scrolling) {\n            _.scrolling = false;\n            return false;\n        }\n\n        _.interrupted = false;\n        _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;\n\n        if ( _.touchObject.curX === undefined ) {\n            return false;\n        }\n\n        if ( _.touchObject.edgeHit === true ) {\n            _.$slider.trigger('edge', [_, _.swipeDirection() ]);\n        }\n\n        if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {\n\n            direction = _.swipeDirection();\n\n            switch ( direction ) {\n\n                case 'left':\n                case 'down':\n\n                    slideCount =\n                        _.options.swipeToSlide ?\n                            _.checkNavigable( _.currentSlide + _.getSlideCount() ) :\n                            _.currentSlide + _.getSlideCount();\n\n                    _.currentDirection = 0;\n\n                    break;\n\n                case 'right':\n                case 'up':\n\n                    slideCount =\n                        _.options.swipeToSlide ?\n                            _.checkNavigable( _.currentSlide - _.getSlideCount() ) :\n                            _.currentSlide - _.getSlideCount();\n\n                    _.currentDirection = 1;\n\n                    break;\n\n                default:\n\n\n            }\n\n            if( direction != 'vertical' ) {\n\n                _.slideHandler( slideCount );\n                _.touchObject = {};\n                _.$slider.trigger('swipe', [_, direction ]);\n\n            }\n\n        } else {\n\n            if ( _.touchObject.startX !== _.touchObject.curX ) {\n\n                _.slideHandler( _.currentSlide );\n                _.touchObject = {};\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.swipeHandler = function(event) {\n\n        var _ = this;\n\n        if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {\n            return;\n        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {\n            return;\n        }\n\n        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?\n            event.originalEvent.touches.length : 1;\n\n        _.touchObject.minSwipe = _.listWidth / _.options\n            .touchThreshold;\n\n        if (_.options.verticalSwiping === true) {\n            _.touchObject.minSwipe = _.listHeight / _.options\n                .touchThreshold;\n        }\n\n        switch (event.data.action) {\n\n            case 'start':\n                _.swipeStart(event);\n                break;\n\n            case 'move':\n                _.swipeMove(event);\n                break;\n\n            case 'end':\n                _.swipeEnd(event);\n                break;\n\n        }\n\n    };\n\n    Slick.prototype.swipeMove = function(event) {\n\n        var _ = this,\n            edgeWasHit = false,\n            curLeft, swipeDirection, swipeLength, positionOffset, touches, verticalSwipeLength;\n\n        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;\n\n        if (!_.dragging || _.scrolling || touches && touches.length !== 1) {\n            return false;\n        }\n\n        curLeft = _.getLeft(_.currentSlide);\n\n        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;\n        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;\n\n        _.touchObject.swipeLength = Math.round(Math.sqrt(\n            Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));\n\n        verticalSwipeLength = Math.round(Math.sqrt(\n            Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));\n\n        if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {\n            _.scrolling = true;\n            return false;\n        }\n\n        if (_.options.verticalSwiping === true) {\n            _.touchObject.swipeLength = verticalSwipeLength;\n        }\n\n        swipeDirection = _.swipeDirection();\n\n        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {\n            _.swiping = true;\n            event.preventDefault();\n        }\n\n        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);\n        if (_.options.verticalSwiping === true) {\n            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;\n        }\n\n\n        swipeLength = _.touchObject.swipeLength;\n\n        _.touchObject.edgeHit = false;\n\n        if (_.options.infinite === false) {\n            if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {\n                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;\n                _.touchObject.edgeHit = true;\n            }\n        }\n\n        if (_.options.vertical === false) {\n            _.swipeLeft = curLeft + swipeLength * positionOffset;\n        } else {\n            _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;\n        }\n        if (_.options.verticalSwiping === true) {\n            _.swipeLeft = curLeft + swipeLength * positionOffset;\n        }\n\n        if (_.options.fade === true || _.options.touchMove === false) {\n            return false;\n        }\n\n        if (_.animating === true) {\n            _.swipeLeft = null;\n            return false;\n        }\n\n        _.setCSS(_.swipeLeft);\n\n    };\n\n    Slick.prototype.swipeStart = function(event) {\n\n        var _ = this,\n            touches;\n\n        _.interrupted = true;\n\n        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {\n            _.touchObject = {};\n            return false;\n        }\n\n        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {\n            touches = event.originalEvent.touches[0];\n        }\n\n        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;\n        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;\n\n        _.dragging = true;\n\n    };\n\n    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {\n\n        var _ = this;\n\n        if (_.$slidesCache !== null) {\n\n            _.unload();\n\n            _.$slideTrack.children(this.options.slide).detach();\n\n            _.$slidesCache.appendTo(_.$slideTrack);\n\n            _.reinit();\n\n        }\n\n    };\n\n    Slick.prototype.unload = function() {\n\n        var _ = this;\n\n        $('.slick-cloned', _.$slider).remove();\n\n        if (_.$dots) {\n            _.$dots.remove();\n        }\n\n        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {\n            _.$prevArrow.remove();\n        }\n\n        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {\n            _.$nextArrow.remove();\n        }\n\n        _.$slides\n            .removeClass('slick-slide slick-active slick-visible slick-current')\n            .attr('aria-hidden', 'true')\n            .css('width', '');\n\n    };\n\n    Slick.prototype.unslick = function(fromBreakpoint) {\n\n        var _ = this;\n        _.$slider.trigger('unslick', [_, fromBreakpoint]);\n        _.destroy();\n\n    };\n\n    Slick.prototype.updateArrows = function() {\n\n        var _ = this,\n            centerOffset;\n\n        centerOffset = Math.floor(_.options.slidesToShow / 2);\n\n        if ( _.options.arrows === true &&\n            _.slideCount > _.options.slidesToShow &&\n            !_.options.infinite ) {\n\n            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            if (_.currentSlide === 0) {\n\n                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {\n\n                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {\n\n                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.updateDots = function() {\n\n        var _ = this;\n\n        if (_.$dots !== null) {\n\n            _.$dots\n                .find('li')\n                    .removeClass('slick-active')\n                    .end();\n\n            _.$dots\n                .find('li')\n                .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))\n                .addClass('slick-active');\n\n        }\n\n    };\n\n    Slick.prototype.visibility = function() {\n\n        var _ = this;\n\n        if ( _.options.autoplay ) {\n\n            if ( document[_.hidden] ) {\n\n                _.interrupted = true;\n\n            } else {\n\n                _.interrupted = false;\n\n            }\n\n        }\n\n    };\n\n    $.fn.slick = function() {\n        var _ = this,\n            opt = arguments[0],\n            args = Array.prototype.slice.call(arguments, 1),\n            l = _.length,\n            i,\n            ret;\n        for (i = 0; i < l; i++) {\n            if (typeof opt == 'object' || typeof opt == 'undefined')\n                _[i].slick = new Slick(_[i], opt);\n            else\n                ret = _[i].slick[opt].apply(_[i].slick, args);\n            if (typeof ret != 'undefined') return ret;\n        }\n        return _;\n    };\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/slick-carousel/slick/slick.js\n");

/***/ }),

/***/ "./node_modules/zurb-twentytwenty/js/jquery.event.move.js":
/*!****************************************************************!*\
  !*** ./node_modules/zurb-twentytwenty/js/jquery.event.move.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// DOM.event.move\n//\n// 2.0.0\n//\n// Stephen Band\n//\n// Triggers 'movestart', 'move' and 'moveend' events after\n// mousemoves following a mousedown cross a distance threshold,\n// similar to the native 'dragstart', 'drag' and 'dragend' events.\n// Move events are throttled to animation frames. Move event objects\n// have the properties:\n//\n// pageX:\n// pageY:     Page coordinates of pointer.\n// startX:\n// startY:    Page coordinates of pointer at movestart.\n// distX:\n// distY:     Distance the pointer has moved since movestart.\n// deltaX:\n// deltaY:    Distance the finger has moved since last event.\n// velocityX:\n// velocityY: Average velocity over last few events.\n\n\n(function(fn) {\n\tif (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (fn),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(function(){\n\tvar assign = Object.assign || window.jQuery && jQuery.extend;\n\n\t// Number of pixels a pressed pointer travels before movestart\n\t// event is fired.\n\tvar threshold = 8;\n\n\t// Shim for requestAnimationFrame, falling back to timer. See:\n\t// see http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n\tvar requestFrame = (function(){\n\t\treturn (\n\t\t\twindow.requestAnimationFrame ||\n\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\twindow.mozRequestAnimationFrame ||\n\t\t\twindow.oRequestAnimationFrame ||\n\t\t\twindow.msRequestAnimationFrame ||\n\t\t\tfunction(fn, element){\n\t\t\t\treturn window.setTimeout(function(){\n\t\t\t\t\tfn();\n\t\t\t\t}, 25);\n\t\t\t}\n\t\t);\n\t})();\n\t\n\t// Shim for customEvent\n\t// see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n\t(function () {\n\t\tif ( typeof window.CustomEvent === \"function\" ) return false;\n\t\tfunction CustomEvent ( event, params ) {\n\t\t\tparams = params || { bubbles: false, cancelable: false, detail: undefined };\n\t\t\tvar evt = document.createEvent( 'CustomEvent' );\n\t\t\tevt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n\t\t\treturn evt;\n\t\t}\n\t\t\n\t\tCustomEvent.prototype = window.Event.prototype;\n\t\twindow.CustomEvent = CustomEvent;\n\t})();\n\n\tvar ignoreTags = {\n\t\t\ttextarea: true,\n\t\t\tinput: true,\n\t\t\tselect: true,\n\t\t\tbutton: true\n\t\t};\n\n\tvar mouseevents = {\n\t\tmove:   'mousemove',\n\t\tcancel: 'mouseup dragstart',\n\t\tend:    'mouseup'\n\t};\n\n\tvar touchevents = {\n\t\tmove:   'touchmove',\n\t\tcancel: 'touchend',\n\t\tend:    'touchend'\n\t};\n\n\tvar rspaces = /\\s+/;\n\n\n\t// DOM Events\n\n\tvar eventOptions = { bubbles: true, cancelable: true };\n\n\tvar eventsSymbol = typeof Symbol === \"function\" ? Symbol('events') : {};\n\n\tfunction createEvent(type) {\n\t\treturn new CustomEvent(type, eventOptions);\n\t}\n\n\tfunction getEvents(node) {\n\t\treturn node[eventsSymbol] || (node[eventsSymbol] = {});\n\t}\n\n\tfunction on(node, types, fn, data, selector) {\n\t\ttypes = types.split(rspaces);\n\n\t\tvar events = getEvents(node);\n\t\tvar i = types.length;\n\t\tvar handlers, type;\n\n\t\tfunction handler(e) { fn(e, data); }\n\n\t\twhile (i--) {\n\t\t\ttype = types[i];\n\t\t\thandlers = events[type] || (events[type] = []);\n\t\t\thandlers.push([fn, handler]);\n\t\t\tnode.addEventListener(type, handler);\n\t\t}\n\t}\n\n\tfunction off(node, types, fn, selector) {\n\t\ttypes = types.split(rspaces);\n\n\t\tvar events = getEvents(node);\n\t\tvar i = types.length;\n\t\tvar type, handlers, k;\n\n\t\tif (!events) { return; }\n\n\t\twhile (i--) {\n\t\t\ttype = types[i];\n\t\t\thandlers = events[type];\n\t\t\tif (!handlers) { continue; }\n\t\t\tk = handlers.length;\n\t\t\twhile (k--) {\n\t\t\t\tif (handlers[k][0] === fn) {\n\t\t\t\t\tnode.removeEventListener(type, handlers[k][1]);\n\t\t\t\t\thandlers.splice(k, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction trigger(node, type, properties) {\n\t\t// Don't cache events. It prevents you from triggering an event of a\n\t\t// given type from inside the handler of another event of that type.\n\t\tvar event = createEvent(type);\n\t\tif (properties) { assign(event, properties); }\n\t\tnode.dispatchEvent(event);\n\t}\n\n\n\t// Constructors\n\n\tfunction Timer(fn){\n\t\tvar callback = fn,\n\t\t    active = false,\n\t\t    running = false;\n\n\t\tfunction trigger(time) {\n\t\t\tif (active){\n\t\t\t\tcallback();\n\t\t\t\trequestFrame(trigger);\n\t\t\t\trunning = true;\n\t\t\t\tactive = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\trunning = false;\n\t\t\t}\n\t\t}\n\n\t\tthis.kick = function(fn) {\n\t\t\tactive = true;\n\t\t\tif (!running) { trigger(); }\n\t\t};\n\n\t\tthis.end = function(fn) {\n\t\t\tvar cb = callback;\n\n\t\t\tif (!fn) { return; }\n\n\t\t\t// If the timer is not running, simply call the end callback.\n\t\t\tif (!running) {\n\t\t\t\tfn();\n\t\t\t}\n\t\t\t// If the timer is running, and has been kicked lately, then\n\t\t\t// queue up the current callback and the end callback, otherwise\n\t\t\t// just the end callback.\n\t\t\telse {\n\t\t\t\tcallback = active ?\n\t\t\t\t\tfunction(){ cb(); fn(); } :\n\t\t\t\t\tfn ;\n\n\t\t\t\tactive = true;\n\t\t\t}\n\t\t};\n\t}\n\n\n\t// Functions\n\n\tfunction noop() {}\n\n\tfunction preventDefault(e) {\n\t\te.preventDefault();\n\t}\n\n\tfunction isIgnoreTag(e) {\n\t\treturn !!ignoreTags[e.target.tagName.toLowerCase()];\n\t}\n\n\tfunction isPrimaryButton(e) {\n\t\t// Ignore mousedowns on any button other than the left (or primary)\n\t\t// mouse button, or when a modifier key is pressed.\n\t\treturn (e.which === 1 && !e.ctrlKey && !e.altKey);\n\t}\n\n\tfunction identifiedTouch(touchList, id) {\n\t\tvar i, l;\n\n\t\tif (touchList.identifiedTouch) {\n\t\t\treturn touchList.identifiedTouch(id);\n\t\t}\n\n\t\t// touchList.identifiedTouch() does not exist in\n\t\t// webkit yet… we must do the search ourselves...\n\n\t\ti = -1;\n\t\tl = touchList.length;\n\n\t\twhile (++i < l) {\n\t\t\tif (touchList[i].identifier === id) {\n\t\t\t\treturn touchList[i];\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction changedTouch(e, data) {\n\t\tvar touch = identifiedTouch(e.changedTouches, data.identifier);\n\n\t\t// This isn't the touch you're looking for.\n\t\tif (!touch) { return; }\n\n\t\t// Chrome Android (at least) includes touches that have not\n\t\t// changed in e.changedTouches. That's a bit annoying. Check\n\t\t// that this touch has changed.\n\t\tif (touch.pageX === data.pageX && touch.pageY === data.pageY) { return; }\n\n\t\treturn touch;\n\t}\n\n\n\t// Handlers that decide when the first movestart is triggered\n\n\tfunction mousedown(e){\n\t\t// Ignore non-primary buttons\n\t\tif (!isPrimaryButton(e)) { return; }\n\n\t\t// Ignore form and interactive elements\n\t\tif (isIgnoreTag(e)) { return; }\n\n\t\ton(document, mouseevents.move, mousemove, e);\n\t\ton(document, mouseevents.cancel, mouseend, e);\n\t}\n\n\tfunction mousemove(e, data){\n\t\tcheckThreshold(e, data, e, removeMouse);\n\t}\n\n\tfunction mouseend(e, data) {\n\t\tremoveMouse();\n\t}\n\n\tfunction removeMouse() {\n\t\toff(document, mouseevents.move, mousemove);\n\t\toff(document, mouseevents.cancel, mouseend);\n\t}\n\n\tfunction touchstart(e) {\n\t\t// Don't get in the way of interaction with form elements\n\t\tif (ignoreTags[e.target.tagName.toLowerCase()]) { return; }\n\n\t\tvar touch = e.changedTouches[0];\n\n\t\t// iOS live updates the touch objects whereas Android gives us copies.\n\t\t// That means we can't trust the touchstart object to stay the same,\n\t\t// so we must copy the data. This object acts as a template for\n\t\t// movestart, move and moveend event objects.\n\t\tvar data = {\n\t\t\ttarget:     touch.target,\n\t\t\tpageX:      touch.pageX,\n\t\t\tpageY:      touch.pageY,\n\t\t\tidentifier: touch.identifier,\n\n\t\t\t// The only way to make handlers individually unbindable is by\n\t\t\t// making them unique.\n\t\t\ttouchmove:  function(e, data) { touchmove(e, data); },\n\t\t\ttouchend:   function(e, data) { touchend(e, data); }\n\t\t};\n\n\t\ton(document, touchevents.move, data.touchmove, data);\n\t\ton(document, touchevents.cancel, data.touchend, data);\n\t}\n\n\tfunction touchmove(e, data) {\n\t\tvar touch = changedTouch(e, data);\n\t\tif (!touch) { return; }\n\t\tcheckThreshold(e, data, touch, removeTouch);\n\t}\n\n\tfunction touchend(e, data) {\n\t\tvar touch = identifiedTouch(e.changedTouches, data.identifier);\n\t\tif (!touch) { return; }\n\t\tremoveTouch(data);\n\t}\n\n\tfunction removeTouch(data) {\n\t\toff(document, touchevents.move, data.touchmove);\n\t\toff(document, touchevents.cancel, data.touchend);\n\t}\n\n\tfunction checkThreshold(e, data, touch, fn) {\n\t\tvar distX = touch.pageX - data.pageX;\n\t\tvar distY = touch.pageY - data.pageY;\n\n\t\t// Do nothing if the threshold has not been crossed.\n\t\tif ((distX * distX) + (distY * distY) < (threshold * threshold)) { return; }\n\n\t\ttriggerStart(e, data, touch, distX, distY, fn);\n\t}\n\n\tfunction triggerStart(e, data, touch, distX, distY, fn) {\n\t\tvar touches = e.targetTouches;\n\t\tvar time = e.timeStamp - data.timeStamp;\n\n\t\t// Create a movestart object with some special properties that\n\t\t// are passed only to the movestart handlers.\n\t\tvar template = {\n\t\t\taltKey:     e.altKey,\n\t\t\tctrlKey:    e.ctrlKey,\n\t\t\tshiftKey:   e.shiftKey,\n\t\t\tstartX:     data.pageX,\n\t\t\tstartY:     data.pageY,\n\t\t\tdistX:      distX,\n\t\t\tdistY:      distY,\n\t\t\tdeltaX:     distX,\n\t\t\tdeltaY:     distY,\n\t\t\tpageX:      touch.pageX,\n\t\t\tpageY:      touch.pageY,\n\t\t\tvelocityX:  distX / time,\n\t\t\tvelocityY:  distY / time,\n\t\t\tidentifier: data.identifier,\n\t\t\ttargetTouches: touches,\n\t\t\tfinger: touches ? touches.length : 1,\n\t\t\tenableMove: function() {\n\t\t\t\tthis.moveEnabled = true;\n\t\t\t\tthis.enableMove = noop;\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t};\n\n\t\t// Trigger the movestart event.\n\t\ttrigger(data.target, 'movestart', template);\n\n\t\t// Unbind handlers that tracked the touch or mouse up till now.\n\t\tfn(data);\n\t}\n\n\n\t// Handlers that control what happens following a movestart\n\n\tfunction activeMousemove(e, data) {\n\t\tvar timer  = data.timer;\n\n\t\tdata.touch = e;\n\t\tdata.timeStamp = e.timeStamp;\n\t\ttimer.kick();\n\t}\n\n\tfunction activeMouseend(e, data) {\n\t\tvar target = data.target;\n\t\tvar event  = data.event;\n\t\tvar timer  = data.timer;\n\n\t\tremoveActiveMouse();\n\n\t\tendEvent(target, event, timer, function() {\n\t\t\t// Unbind the click suppressor, waiting until after mouseup\n\t\t\t// has been handled.\n\t\t\tsetTimeout(function(){\n\t\t\t\toff(target, 'click', preventDefault);\n\t\t\t}, 0);\n\t\t});\n\t}\n\n\tfunction removeActiveMouse() {\n\t\toff(document, mouseevents.move, activeMousemove);\n\t\toff(document, mouseevents.end, activeMouseend);\n\t}\n\n\tfunction activeTouchmove(e, data) {\n\t\tvar event = data.event;\n\t\tvar timer = data.timer;\n\t\tvar touch = changedTouch(e, event);\n\n\t\tif (!touch) { return; }\n\n\t\t// Stop the interface from gesturing\n\t\te.preventDefault();\n\n\t\tevent.targetTouches = e.targetTouches;\n\t\tdata.touch = touch;\n\t\tdata.timeStamp = e.timeStamp;\n\n\t\ttimer.kick();\n\t}\n\n\tfunction activeTouchend(e, data) {\n\t\tvar target = data.target;\n\t\tvar event  = data.event;\n\t\tvar timer  = data.timer;\n\t\tvar touch  = identifiedTouch(e.changedTouches, event.identifier);\n\n\t\t// This isn't the touch you're looking for.\n\t\tif (!touch) { return; }\n\n\t\tremoveActiveTouch(data);\n\t\tendEvent(target, event, timer);\n\t}\n\n\tfunction removeActiveTouch(data) {\n\t\toff(document, touchevents.move, data.activeTouchmove);\n\t\toff(document, touchevents.end, data.activeTouchend);\n\t}\n\n\n\t// Logic for triggering move and moveend events\n\n\tfunction updateEvent(event, touch, timeStamp) {\n\t\tvar time = timeStamp - event.timeStamp;\n\n\t\tevent.distX =  touch.pageX - event.startX;\n\t\tevent.distY =  touch.pageY - event.startY;\n\t\tevent.deltaX = touch.pageX - event.pageX;\n\t\tevent.deltaY = touch.pageY - event.pageY;\n\n\t\t// Average the velocity of the last few events using a decay\n\t\t// curve to even out spurious jumps in values.\n\t\tevent.velocityX = 0.3 * event.velocityX + 0.7 * event.deltaX / time;\n\t\tevent.velocityY = 0.3 * event.velocityY + 0.7 * event.deltaY / time;\n\t\tevent.pageX =  touch.pageX;\n\t\tevent.pageY =  touch.pageY;\n\t}\n\n\tfunction endEvent(target, event, timer, fn) {\n\t\ttimer.end(function(){\n\t\t\ttrigger(target, 'moveend', event);\n\t\t\treturn fn && fn();\n\t\t});\n\t}\n\n\n\t// Set up the DOM\n\n\tfunction movestart(e) {\n\t\tif (e.defaultPrevented) { return; }\n\t\tif (!e.moveEnabled) { return; }\n\n\t\tvar event = {\n\t\t\tstartX:        e.startX,\n\t\t\tstartY:        e.startY,\n\t\t\tpageX:         e.pageX,\n\t\t\tpageY:         e.pageY,\n\t\t\tdistX:         e.distX,\n\t\t\tdistY:         e.distY,\n\t\t\tdeltaX:        e.deltaX,\n\t\t\tdeltaY:        e.deltaY,\n\t\t\tvelocityX:     e.velocityX,\n\t\t\tvelocityY:     e.velocityY,\n\t\t\tidentifier:    e.identifier,\n\t\t\ttargetTouches: e.targetTouches,\n\t\t\tfinger:        e.finger\n\t\t};\n\n\t\tvar data = {\n\t\t\ttarget:    e.target,\n\t\t\tevent:     event,\n\t\t\ttimer:     new Timer(update),\n\t\t\ttouch:     undefined,\n\t\t\ttimeStamp: e.timeStamp\n\t\t};\n\n\t\tfunction update(time) {\n\t\t\tupdateEvent(event, data.touch, data.timeStamp);\n\t\t\ttrigger(data.target, 'move', event);\n\t\t}\n\n\t\tif (e.identifier === undefined) {\n\t\t\t// We're dealing with a mouse event.\n\t\t\t// Stop clicks from propagating during a move\n\t\t\ton(e.target, 'click', preventDefault);\n\t\t\ton(document, mouseevents.move, activeMousemove, data);\n\t\t\ton(document, mouseevents.end, activeMouseend, data);\n\t\t}\n\t\telse {\n\t\t\t// In order to unbind correct handlers they have to be unique\n\t\t\tdata.activeTouchmove = function(e, data) { activeTouchmove(e, data); };\n\t\t\tdata.activeTouchend = function(e, data) { activeTouchend(e, data); };\n\n\t\t\t// We're dealing with a touch.\n\t\t\ton(document, touchevents.move, data.activeTouchmove, data);\n\t\t\ton(document, touchevents.end, data.activeTouchend, data);\n\t\t}\n\t}\n\n\ton(document, 'mousedown', mousedown);\n\ton(document, 'touchstart', touchstart);\n\ton(document, 'movestart', movestart);\n\n\n\t// jQuery special events\n\t//\n\t// jQuery event objects are copies of DOM event objects. They need\n\t// a little help copying the move properties across.\n\n\tif (!window.jQuery) { return; }\n\n\tvar properties = (\"startX startY pageX pageY distX distY deltaX deltaY velocityX velocityY\").split(' ');\n\n\tfunction enableMove1(e) { e.enableMove(); }\n\tfunction enableMove2(e) { e.enableMove(); }\n\tfunction enableMove3(e) { e.enableMove(); }\n\n\tfunction add(handleObj) {\n\t\tvar handler = handleObj.handler;\n\n\t\thandleObj.handler = function(e) {\n\t\t\t// Copy move properties across from originalEvent\n\t\t\tvar i = properties.length;\n\t\t\tvar property;\n\n\t\t\twhile(i--) {\n\t\t\t\tproperty = properties[i];\n\t\t\t\te[property] = e.originalEvent[property];\n\t\t\t}\n\n\t\t\thandler.apply(this, arguments);\n\t\t};\n\t}\n\n\tjQuery.event.special.movestart = {\n\t\tsetup: function() {\n\t\t\t// Movestart must be enabled to allow other move events\n\t\t\ton(this, 'movestart', enableMove1);\n\n\t\t\t// Do listen to DOM events\n\t\t\treturn false;\n\t\t},\n\n\t\tteardown: function() {\n\t\t\toff(this, 'movestart', enableMove1);\n\t\t\treturn false;\n\t\t},\n\n\t\tadd: add\n\t};\n\n\tjQuery.event.special.move = {\n\t\tsetup: function() {\n\t\t\ton(this, 'movestart', enableMove2);\n\t\t\treturn false;\n\t\t},\n\n\t\tteardown: function() {\n\t\t\toff(this, 'movestart', enableMove2);\n\t\t\treturn false;\n\t\t},\n\n\t\tadd: add\n\t};\n\n\tjQuery.event.special.moveend = {\n\t\tsetup: function() {\n\t\t\ton(this, 'movestart', enableMove3);\n\t\t\treturn false;\n\t\t},\n\n\t\tteardown: function() {\n\t\t\toff(this, 'movestart', enableMove3);\n\t\t\treturn false;\n\t\t},\n\n\t\tadd: add\n\t};\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/zurb-twentytwenty/js/jquery.event.move.js\n");

/***/ }),

/***/ "./node_modules/zurb-twentytwenty/js/jquery.twentytwenty.js":
/*!******************************************************************!*\
  !*** ./node_modules/zurb-twentytwenty/js/jquery.twentytwenty.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function($){\n\n  $.fn.twentytwenty = function(options) {\n    var options = $.extend({\n      default_offset_pct: 0.5,\n      orientation: 'horizontal',\n      before_label: 'Before',\n      after_label: 'After',\n      no_overlay: false,\n      move_slider_on_hover: false,\n      move_with_handle_only: true,\n      click_to_move: false\n    }, options);\n\n    return this.each(function() {\n\n      var sliderPct = options.default_offset_pct;\n      var container = $(this);\n      var sliderOrientation = options.orientation;\n      var beforeDirection = (sliderOrientation === 'vertical') ? 'down' : 'left';\n      var afterDirection = (sliderOrientation === 'vertical') ? 'up' : 'right';\n\n\n      container.wrap(\"<div class='twentytwenty-wrapper twentytwenty-\" + sliderOrientation + \"'></div>\");\n      if(!options.no_overlay) {\n        container.append(\"<div class='twentytwenty-overlay'></div>\");\n      }\n      var beforeImg = container.find(\"img:first\");\n      var afterImg = container.find(\"img:last\");\n      container.append(\"<div class='twentytwenty-handle'></div>\");\n      var slider = container.find(\".twentytwenty-handle\");\n      slider.append(\"<span class='twentytwenty-\" + beforeDirection + \"-arrow'></span>\");\n      slider.append(\"<span class='twentytwenty-\" + afterDirection + \"-arrow'></span>\");\n      container.addClass(\"twentytwenty-container\");\n      beforeImg.addClass(\"twentytwenty-before\");\n      afterImg.addClass(\"twentytwenty-after\");\n\n      var overlay = container.find(\".twentytwenty-overlay\");\n      overlay.append(\"<div class='twentytwenty-before-label' data-content='\"+options.before_label+\"'></div>\");\n      overlay.append(\"<div class='twentytwenty-after-label' data-content='\"+options.after_label+\"'></div>\");\n\n      var calcOffset = function(dimensionPct) {\n        var w = beforeImg.width();\n        var h = beforeImg.height();\n        return {\n          w: w+\"px\",\n          h: h+\"px\",\n          cw: (dimensionPct*w)+\"px\",\n          ch: (dimensionPct*h)+\"px\"\n        };\n      };\n\n      var adjustContainer = function(offset) {\n      \tif (sliderOrientation === 'vertical') {\n          beforeImg.css(\"clip\", \"rect(0,\"+offset.w+\",\"+offset.ch+\",0)\");\n          afterImg.css(\"clip\", \"rect(\"+offset.ch+\",\"+offset.w+\",\"+offset.h+\",0)\");\n      \t}\n      \telse {\n          beforeImg.css(\"clip\", \"rect(0,\"+offset.cw+\",\"+offset.h+\",0)\");\n          afterImg.css(\"clip\", \"rect(0,\"+offset.w+\",\"+offset.h+\",\"+offset.cw+\")\");\n    \t}\n        container.css(\"height\", offset.h);\n      };\n\n      var adjustSlider = function(pct) {\n        var offset = calcOffset(pct);\n        slider.css((sliderOrientation===\"vertical\") ? \"top\" : \"left\", (sliderOrientation===\"vertical\") ? offset.ch : offset.cw);\n        adjustContainer(offset);\n      };\n\n      // Return the number specified or the min/max number if it outside the range given.\n      var minMaxNumber = function(num, min, max) {\n        return Math.max(min, Math.min(max, num));\n      };\n\n      // Calculate the slider percentage based on the position.\n      var getSliderPercentage = function(positionX, positionY) {\n        var sliderPercentage = (sliderOrientation === 'vertical') ?\n          (positionY-offsetY)/imgHeight :\n          (positionX-offsetX)/imgWidth;\n\n        return minMaxNumber(sliderPercentage, 0, 1);\n      };\n\n\n      $(window).on(\"resize.twentytwenty\", function(e) {\n        adjustSlider(sliderPct);\n      });\n\n      var offsetX = 0;\n      var offsetY = 0;\n      var imgWidth = 0;\n      var imgHeight = 0;\n      var onMoveStart = function(e) {\n        if (((e.distX > e.distY && e.distX < -e.distY) || (e.distX < e.distY && e.distX > -e.distY)) && sliderOrientation !== 'vertical') {\n          e.preventDefault();\n        }\n        else if (((e.distX < e.distY && e.distX < -e.distY) || (e.distX > e.distY && e.distX > -e.distY)) && sliderOrientation === 'vertical') {\n          e.preventDefault();\n        }\n        container.addClass(\"active\");\n        offsetX = container.offset().left;\n        offsetY = container.offset().top;\n        imgWidth = beforeImg.width(); \n        imgHeight = beforeImg.height();          \n      };\n      var onMove = function(e) {\n        if (container.hasClass(\"active\")) {\n          sliderPct = getSliderPercentage(e.pageX, e.pageY);\n          adjustSlider(sliderPct);\n        }\n      };\n      var onMoveEnd = function() {\n          container.removeClass(\"active\");\n      };\n\n      var moveTarget = options.move_with_handle_only ? slider : container;\n      moveTarget.on(\"movestart\",onMoveStart);\n      moveTarget.on(\"move\",onMove);\n      moveTarget.on(\"moveend\",onMoveEnd);\n\n      if (options.move_slider_on_hover) {\n        container.on(\"mouseenter\", onMoveStart);\n        container.on(\"mousemove\", onMove);\n        container.on(\"mouseleave\", onMoveEnd);\n      }\n\n      slider.on(\"touchmove\", function(e) {\n        e.preventDefault();\n      });\n\n      container.find(\"img\").on(\"mousedown\", function(event) {\n        event.preventDefault();\n      });\n\n      if (options.click_to_move) {\n        container.on('click', function(e) {\n          offsetX = container.offset().left;\n          offsetY = container.offset().top;\n          imgWidth = beforeImg.width();\n          imgHeight = beforeImg.height();\n\n          sliderPct = getSliderPercentage(e.pageX, e.pageY);\n          adjustSlider(sliderPct);\n        });\n      }\n\n      $(window).trigger(\"resize.twentytwenty\");\n    });\n  };\n\n})(jQuery);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/zurb-twentytwenty/js/jquery.twentytwenty.js\n");

/***/ }),

/***/ "./src/blocks/accordion/script.js":
/*!****************************************!*\
  !*** ./src/blocks/accordion/script.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n\n\njquery__WEBPACK_IMPORTED_MODULE_0___default()(function ($) {\n  var expandedClass = 'wp-block-gutenbee-accordion-item-expanded';\n  var $titles = $('.wp-block-gutenbee-accordion-item-title');\n  var $defaultExpanded = $('.' + expandedClass);\n\n  $defaultExpanded.find('.wp-block-gutenbee-accordion-item-content-wrap').slideDown(350);\n\n  $titles.on('click', function () {\n    var $this = $(this);\n    var $accordion = $this.parents('.wp-block-gutenbee-accordion');\n    var $item = $this.parent('.wp-block-gutenbee-accordion-item');\n    var $content = $item.find('.wp-block-gutenbee-accordion-item-content-wrap');\n    var collapseOthers = $accordion.data('collapse-others');\n\n    if ($item.hasClass(expandedClass)) {\n      $content.slideUp(350);\n      $item.removeClass(expandedClass);\n    } else {\n      if (collapseOthers) {\n        $item.siblings().removeClass(expandedClass).find('.wp-block-gutenbee-accordion-item-content-wrap').slideUp(350);\n      }\n      $content.slideDown(350);\n      $item.addClass(expandedClass);\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cC5bbmFtZV0vLi9zcmMvYmxvY2tzL2FjY29yZGlvbi9zY3JpcHQuanM/NjBhOCJdLCJuYW1lcyI6WyJqUXVlcnkiLCJleHBhbmRlZENsYXNzIiwiJHRpdGxlcyIsIiQiLCIkZGVmYXVsdEV4cGFuZGVkIiwiZmluZCIsInNsaWRlRG93biIsIm9uIiwiJHRoaXMiLCIkYWNjb3JkaW9uIiwicGFyZW50cyIsIiRpdGVtIiwicGFyZW50IiwiJGNvbnRlbnQiLCJjb2xsYXBzZU90aGVycyIsImRhdGEiLCJoYXNDbGFzcyIsInNsaWRlVXAiLCJyZW1vdmVDbGFzcyIsInNpYmxpbmdzIiwiYWRkQ2xhc3MiXSwibWFwcGluZ3MiOiI7OztBQUFBOztBQUVBLDZDQUFBQSxDQUFPLGFBQUs7QUFDVixNQUFNQyxnQkFBZ0IsMkNBQXRCO0FBQ0EsTUFBTUMsVUFBVUMsRUFBRSx5Q0FBRixDQUFoQjtBQUNBLE1BQU1DLG1CQUFtQkQsUUFBTUYsYUFBTixDQUF6Qjs7QUFFQUcsbUJBQ0dDLElBREgsQ0FDUSxnREFEUixFQUVHQyxTQUZILENBRWEsR0FGYjs7QUFJQUosVUFBUUssRUFBUixDQUFXLE9BQVgsRUFBb0IsWUFBVztBQUM3QixRQUFNQyxRQUFRTCxFQUFFLElBQUYsQ0FBZDtBQUNBLFFBQU1NLGFBQWFELE1BQU1FLE9BQU4sQ0FBYyw4QkFBZCxDQUFuQjtBQUNBLFFBQU1DLFFBQVFILE1BQU1JLE1BQU4sQ0FBYSxtQ0FBYixDQUFkO0FBQ0EsUUFBTUMsV0FBV0YsTUFBTU4sSUFBTixDQUNmLGdEQURlLENBQWpCO0FBR0EsUUFBTVMsaUJBQWlCTCxXQUFXTSxJQUFYLENBQWdCLGlCQUFoQixDQUF2Qjs7QUFFQSxRQUFJSixNQUFNSyxRQUFOLENBQWVmLGFBQWYsQ0FBSixFQUFtQztBQUNqQ1ksZUFBU0ksT0FBVCxDQUFpQixHQUFqQjtBQUNBTixZQUFNTyxXQUFOLENBQWtCakIsYUFBbEI7QUFDRCxLQUhELE1BR087QUFDTCxVQUFJYSxjQUFKLEVBQW9CO0FBQ2xCSCxjQUNHUSxRQURILEdBRUdELFdBRkgsQ0FFZWpCLGFBRmYsRUFHR0ksSUFISCxDQUdRLGdEQUhSLEVBSUdZLE9BSkgsQ0FJVyxHQUpYO0FBS0Q7QUFDREosZUFBU1AsU0FBVCxDQUFtQixHQUFuQjtBQUNBSyxZQUFNUyxRQUFOLENBQWVuQixhQUFmO0FBQ0Q7QUFDRixHQXZCRDtBQXdCRCxDQWpDRCIsImZpbGUiOiIuL3NyYy9ibG9ja3MvYWNjb3JkaW9uL3NjcmlwdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBqUXVlcnkgZnJvbSAnanF1ZXJ5JztcblxualF1ZXJ5KCQgPT4ge1xuICBjb25zdCBleHBhbmRlZENsYXNzID0gJ3dwLWJsb2NrLWd1dGVuYmVlLWFjY29yZGlvbi1pdGVtLWV4cGFuZGVkJztcbiAgY29uc3QgJHRpdGxlcyA9ICQoJy53cC1ibG9jay1ndXRlbmJlZS1hY2NvcmRpb24taXRlbS10aXRsZScpO1xuICBjb25zdCAkZGVmYXVsdEV4cGFuZGVkID0gJChgLiR7ZXhwYW5kZWRDbGFzc31gKTtcblxuICAkZGVmYXVsdEV4cGFuZGVkXG4gICAgLmZpbmQoJy53cC1ibG9jay1ndXRlbmJlZS1hY2NvcmRpb24taXRlbS1jb250ZW50LXdyYXAnKVxuICAgIC5zbGlkZURvd24oMzUwKTtcblxuICAkdGl0bGVzLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0ICR0aGlzID0gJCh0aGlzKTtcbiAgICBjb25zdCAkYWNjb3JkaW9uID0gJHRoaXMucGFyZW50cygnLndwLWJsb2NrLWd1dGVuYmVlLWFjY29yZGlvbicpO1xuICAgIGNvbnN0ICRpdGVtID0gJHRoaXMucGFyZW50KCcud3AtYmxvY2stZ3V0ZW5iZWUtYWNjb3JkaW9uLWl0ZW0nKTtcbiAgICBjb25zdCAkY29udGVudCA9ICRpdGVtLmZpbmQoXG4gICAgICAnLndwLWJsb2NrLWd1dGVuYmVlLWFjY29yZGlvbi1pdGVtLWNvbnRlbnQtd3JhcCcsXG4gICAgKTtcbiAgICBjb25zdCBjb2xsYXBzZU90aGVycyA9ICRhY2NvcmRpb24uZGF0YSgnY29sbGFwc2Utb3RoZXJzJyk7XG5cbiAgICBpZiAoJGl0ZW0uaGFzQ2xhc3MoZXhwYW5kZWRDbGFzcykpIHtcbiAgICAgICRjb250ZW50LnNsaWRlVXAoMzUwKTtcbiAgICAgICRpdGVtLnJlbW92ZUNsYXNzKGV4cGFuZGVkQ2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY29sbGFwc2VPdGhlcnMpIHtcbiAgICAgICAgJGl0ZW1cbiAgICAgICAgICAuc2libGluZ3MoKVxuICAgICAgICAgIC5yZW1vdmVDbGFzcyhleHBhbmRlZENsYXNzKVxuICAgICAgICAgIC5maW5kKCcud3AtYmxvY2stZ3V0ZW5iZWUtYWNjb3JkaW9uLWl0ZW0tY29udGVudC13cmFwJylcbiAgICAgICAgICAuc2xpZGVVcCgzNTApO1xuICAgICAgfVxuICAgICAgJGNvbnRlbnQuc2xpZGVEb3duKDM1MCk7XG4gICAgICAkaXRlbS5hZGRDbGFzcyhleHBhbmRlZENsYXNzKTtcbiAgICB9XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/blocks/accordion/script.js\n");

/***/ }),

/***/ "./src/blocks/countdown/script.js":
/*!****************************************!*\
  !*** ./src/blocks/countdown/script.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _util_CountdownTimer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/CountdownTimer */ \"./src/util/CountdownTimer.js\");\n\n\n\n\njquery__WEBPACK_IMPORTED_MODULE_0___default()(function ($) {\n  var $countdown = $('.wp-block-gutenbee-countdown');\n\n  $countdown.each(function () {\n    var $this = $(this);\n    var date = $this.data('date');\n\n    // eslint-disable-next-line no-new\n    new _util_CountdownTimer__WEBPACK_IMPORTED_MODULE_1__[\"default\"]($this.get(0), date);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cC5bbmFtZV0vLi9zcmMvYmxvY2tzL2NvdW50ZG93bi9zY3JpcHQuanM/YTJhOCJdLCJuYW1lcyI6WyJqUXVlcnkiLCIkY291bnRkb3duIiwiJCIsImVhY2giLCIkdGhpcyIsImRhdGUiLCJkYXRhIiwiZ2V0Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBRUE7O0FBRUEsNkNBQUFBLENBQU8sYUFBSztBQUNWLE1BQU1DLGFBQWFDLEVBQUUsOEJBQUYsQ0FBbkI7O0FBRUFELGFBQVdFLElBQVgsQ0FBZ0IsWUFBVztBQUN6QixRQUFNQyxRQUFRRixFQUFFLElBQUYsQ0FBZDtBQUNBLFFBQU1HLE9BQU9ELE1BQU1FLElBQU4sQ0FBVyxNQUFYLENBQWI7O0FBRUE7QUFDQSxRQUFJLDREQUFKLENBQW1CRixNQUFNRyxHQUFOLENBQVUsQ0FBVixDQUFuQixFQUFpQ0YsSUFBakM7QUFDRCxHQU5EO0FBT0QsQ0FWRCIsImZpbGUiOiIuL3NyYy9ibG9ja3MvY291bnRkb3duL3NjcmlwdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBqUXVlcnkgZnJvbSAnanF1ZXJ5JztcblxuaW1wb3J0IENvdW50ZG93blRpbWVyIGZyb20gJy4uLy4uL3V0aWwvQ291bnRkb3duVGltZXInO1xuXG5qUXVlcnkoJCA9PiB7XG4gIGNvbnN0ICRjb3VudGRvd24gPSAkKCcud3AtYmxvY2stZ3V0ZW5iZWUtY291bnRkb3duJyk7XG5cbiAgJGNvdW50ZG93bi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0ICR0aGlzID0gJCh0aGlzKTtcbiAgICBjb25zdCBkYXRlID0gJHRoaXMuZGF0YSgnZGF0ZScpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ld1xuICAgIG5ldyBDb3VudGRvd25UaW1lcigkdGhpcy5nZXQoMCksIGRhdGUpO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/blocks/countdown/script.js\n");

/***/ }),

/***/ "./src/blocks/countup/script.js":
/*!**************************************!*\
  !*** ./src/blocks/countup/script.js ***!
  \**************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var countup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! countup */ \"./node_modules/countup/dist/countUp.min.js\");\n/* harmony import */ var countup__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(countup__WEBPACK_IMPORTED_MODULE_0__);\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  var elements = document.getElementsByClassName('wp-block-gutenbee-countup-number');\n\n  [].concat(_toConsumableArray(elements)).forEach(function (element) {\n    var separator = element.dataset.separator;\n    var options = {\n      useGrouping: !!separator,\n      separator: separator,\n      prefix: element.dataset.prefix,\n      suffix: element.dataset.suffix\n    };\n\n    var countup = new countup__WEBPACK_IMPORTED_MODULE_0___default.a(element, element.dataset.start, element.dataset.end, 0, element.dataset.animationDuration, options);\n\n    if (!countup.error) {\n      countup.start();\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cC5bbmFtZV0vLi9zcmMvYmxvY2tzL2NvdW50dXAvc2NyaXB0LmpzPzA5MzkiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZWxlbWVudHMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZm9yRWFjaCIsInNlcGFyYXRvciIsImVsZW1lbnQiLCJkYXRhc2V0Iiwib3B0aW9ucyIsInVzZUdyb3VwaW5nIiwicHJlZml4Iiwic3VmZml4IiwiY291bnR1cCIsInN0YXJ0IiwiZW5kIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJlcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFFQUEsU0FBU0MsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDLFlBQU07QUFDbEQsTUFBTUMsV0FBV0YsU0FBU0csc0JBQVQsQ0FDZixrQ0FEZSxDQUFqQjs7QUFJQSwrQkFBSUQsUUFBSixHQUFjRSxPQUFkLENBQXNCLG1CQUFXO0FBQy9CLFFBQU1DLFlBQVlDLFFBQVFDLE9BQVIsQ0FBZ0JGLFNBQWxDO0FBQ0EsUUFBTUcsVUFBVTtBQUNkQyxtQkFBYSxDQUFDLENBQUNKLFNBREQ7QUFFZEEsMEJBRmM7QUFHZEssY0FBUUosUUFBUUMsT0FBUixDQUFnQkcsTUFIVjtBQUlkQyxjQUFRTCxRQUFRQyxPQUFSLENBQWdCSTtBQUpWLEtBQWhCOztBQU9BLFFBQU1DLFVBQVUsSUFBSSw4Q0FBSixDQUNkTixPQURjLEVBRWRBLFFBQVFDLE9BQVIsQ0FBZ0JNLEtBRkYsRUFHZFAsUUFBUUMsT0FBUixDQUFnQk8sR0FIRixFQUlkLENBSmMsRUFLZFIsUUFBUUMsT0FBUixDQUFnQlEsaUJBTEYsRUFNZFAsT0FOYyxDQUFoQjs7QUFTQSxRQUFJLENBQUNJLFFBQVFJLEtBQWIsRUFBb0I7QUFDbEJKLGNBQVFDLEtBQVI7QUFDRDtBQUNGLEdBckJEO0FBc0JELENBM0JEIiwiZmlsZSI6Ii4vc3JjL2Jsb2Nrcy9jb3VudHVwL3NjcmlwdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb3VudFVwIGZyb20gJ2NvdW50dXAnO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICBjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXG4gICAgJ3dwLWJsb2NrLWd1dGVuYmVlLWNvdW50dXAtbnVtYmVyJyxcbiAgKTtcblxuICBbLi4uZWxlbWVudHNdLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgY29uc3Qgc2VwYXJhdG9yID0gZWxlbWVudC5kYXRhc2V0LnNlcGFyYXRvcjtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgdXNlR3JvdXBpbmc6ICEhc2VwYXJhdG9yLFxuICAgICAgc2VwYXJhdG9yLFxuICAgICAgcHJlZml4OiBlbGVtZW50LmRhdGFzZXQucHJlZml4LFxuICAgICAgc3VmZml4OiBlbGVtZW50LmRhdGFzZXQuc3VmZml4LFxuICAgIH07XG5cbiAgICBjb25zdCBjb3VudHVwID0gbmV3IENvdW50VXAoXG4gICAgICBlbGVtZW50LFxuICAgICAgZWxlbWVudC5kYXRhc2V0LnN0YXJ0LFxuICAgICAgZWxlbWVudC5kYXRhc2V0LmVuZCxcbiAgICAgIDAsXG4gICAgICBlbGVtZW50LmRhdGFzZXQuYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICBvcHRpb25zLFxuICAgICk7XG5cbiAgICBpZiAoIWNvdW50dXAuZXJyb3IpIHtcbiAgICAgIGNvdW50dXAuc3RhcnQoKTtcbiAgICB9XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/blocks/countup/script.js\n");

/***/ }),

/***/ "./src/blocks/google-maps/script.js":
/*!******************************************!*\
  !*** ./src/blocks/google-maps/script.js ***!
  \******************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n\n\njquery__WEBPACK_IMPORTED_MODULE_0___default()(function ($) {\n  var google = window.google;\n\n  if (typeof google === 'undefined') {\n    return;\n  }\n\n  var $maps = $('.wp-block-gutenbee-google-maps');\n\n  $maps.each(function () {\n    var $this = $(this);\n    var location = {\n      lat: $this.data('latitude'),\n      lng: $this.data('longitude')\n    };\n    var info = $this.data('info-window');\n\n    var map = new google.maps.Map($this.get(0), {\n      zoom: $this.data('zoom'),\n      center: location,\n      scrollwheel: !$this.data('prevent-scroll'),\n      styles: $this.data('map-style')\n    });\n\n    var marker = new google.maps.Marker({\n      position: location,\n      icon: $this.data('marker-icon'),\n      map: map\n    });\n\n    var infoWindow = new google.maps.InfoWindow({\n      content: info,\n      maxWidth: 350\n    });\n\n    if (info) {\n      marker.addListener('click', function () {\n        infoWindow.open(map, marker);\n      });\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cC5bbmFtZV0vLi9zcmMvYmxvY2tzL2dvb2dsZS1tYXBzL3NjcmlwdC5qcz8zMmNlIl0sIm5hbWVzIjpbImpRdWVyeSIsImdvb2dsZSIsIndpbmRvdyIsIiRtYXBzIiwiJCIsImVhY2giLCIkdGhpcyIsImxvY2F0aW9uIiwibGF0IiwiZGF0YSIsImxuZyIsImluZm8iLCJtYXAiLCJtYXBzIiwiTWFwIiwiZ2V0Iiwiem9vbSIsImNlbnRlciIsInNjcm9sbHdoZWVsIiwic3R5bGVzIiwibWFya2VyIiwiTWFya2VyIiwicG9zaXRpb24iLCJpY29uIiwiaW5mb1dpbmRvdyIsIkluZm9XaW5kb3ciLCJjb250ZW50IiwibWF4V2lkdGgiLCJhZGRMaXN0ZW5lciIsIm9wZW4iXSwibWFwcGluZ3MiOiI7OztBQUFBOztBQUVBLDZDQUFBQSxDQUFPLGFBQUs7QUFDVixNQUFNQyxTQUFTQyxPQUFPRCxNQUF0Qjs7QUFFQSxNQUFJLE9BQU9BLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7QUFDakM7QUFDRDs7QUFFRCxNQUFNRSxRQUFRQyxFQUFFLGdDQUFGLENBQWQ7O0FBRUFELFFBQU1FLElBQU4sQ0FBVyxZQUFXO0FBQ3BCLFFBQU1DLFFBQVFGLEVBQUUsSUFBRixDQUFkO0FBQ0EsUUFBTUcsV0FBVztBQUNmQyxXQUFLRixNQUFNRyxJQUFOLENBQVcsVUFBWCxDQURVO0FBRWZDLFdBQUtKLE1BQU1HLElBQU4sQ0FBVyxXQUFYO0FBRlUsS0FBakI7QUFJQSxRQUFNRSxPQUFPTCxNQUFNRyxJQUFOLENBQVcsYUFBWCxDQUFiOztBQUVBLFFBQU1HLE1BQU0sSUFBSVgsT0FBT1ksSUFBUCxDQUFZQyxHQUFoQixDQUFvQlIsTUFBTVMsR0FBTixDQUFVLENBQVYsQ0FBcEIsRUFBa0M7QUFDNUNDLFlBQU1WLE1BQU1HLElBQU4sQ0FBVyxNQUFYLENBRHNDO0FBRTVDUSxjQUFRVixRQUZvQztBQUc1Q1csbUJBQWEsQ0FBQ1osTUFBTUcsSUFBTixDQUFXLGdCQUFYLENBSDhCO0FBSTVDVSxjQUFRYixNQUFNRyxJQUFOLENBQVcsV0FBWDtBQUpvQyxLQUFsQyxDQUFaOztBQU9BLFFBQU1XLFNBQVMsSUFBSW5CLE9BQU9ZLElBQVAsQ0FBWVEsTUFBaEIsQ0FBdUI7QUFDcENDLGdCQUFVZixRQUQwQjtBQUVwQ2dCLFlBQU1qQixNQUFNRyxJQUFOLENBQVcsYUFBWCxDQUY4QjtBQUdwQ0c7QUFIb0MsS0FBdkIsQ0FBZjs7QUFNQSxRQUFNWSxhQUFhLElBQUl2QixPQUFPWSxJQUFQLENBQVlZLFVBQWhCLENBQTJCO0FBQzVDQyxlQUFTZixJQURtQztBQUU1Q2dCLGdCQUFVO0FBRmtDLEtBQTNCLENBQW5COztBQUtBLFFBQUloQixJQUFKLEVBQVU7QUFDUlMsYUFBT1EsV0FBUCxDQUFtQixPQUFuQixFQUE0QixZQUFNO0FBQ2hDSixtQkFBV0ssSUFBWCxDQUFnQmpCLEdBQWhCLEVBQXFCUSxNQUFyQjtBQUNELE9BRkQ7QUFHRDtBQUNGLEdBL0JEO0FBZ0NELENBekNEIiwiZmlsZSI6Ii4vc3JjL2Jsb2Nrcy9nb29nbGUtbWFwcy9zY3JpcHQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgalF1ZXJ5IGZyb20gJ2pxdWVyeSc7XG5cbmpRdWVyeSgkID0+IHtcbiAgY29uc3QgZ29vZ2xlID0gd2luZG93Lmdvb2dsZTtcblxuICBpZiAodHlwZW9mIGdvb2dsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCAkbWFwcyA9ICQoJy53cC1ibG9jay1ndXRlbmJlZS1nb29nbGUtbWFwcycpO1xuXG4gICRtYXBzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgJHRoaXMgPSAkKHRoaXMpO1xuICAgIGNvbnN0IGxvY2F0aW9uID0ge1xuICAgICAgbGF0OiAkdGhpcy5kYXRhKCdsYXRpdHVkZScpLFxuICAgICAgbG5nOiAkdGhpcy5kYXRhKCdsb25naXR1ZGUnKSxcbiAgICB9O1xuICAgIGNvbnN0IGluZm8gPSAkdGhpcy5kYXRhKCdpbmZvLXdpbmRvdycpO1xuXG4gICAgY29uc3QgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcCgkdGhpcy5nZXQoMCksIHtcbiAgICAgIHpvb206ICR0aGlzLmRhdGEoJ3pvb20nKSxcbiAgICAgIGNlbnRlcjogbG9jYXRpb24sXG4gICAgICBzY3JvbGx3aGVlbDogISR0aGlzLmRhdGEoJ3ByZXZlbnQtc2Nyb2xsJyksXG4gICAgICBzdHlsZXM6ICR0aGlzLmRhdGEoJ21hcC1zdHlsZScpLFxuICAgIH0pO1xuXG4gICAgY29uc3QgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XG4gICAgICBwb3NpdGlvbjogbG9jYXRpb24sXG4gICAgICBpY29uOiAkdGhpcy5kYXRhKCdtYXJrZXItaWNvbicpLFxuICAgICAgbWFwLFxuICAgIH0pO1xuXG4gICAgY29uc3QgaW5mb1dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHtcbiAgICAgIGNvbnRlbnQ6IGluZm8sXG4gICAgICBtYXhXaWR0aDogMzUwLFxuICAgIH0pO1xuXG4gICAgaWYgKGluZm8pIHtcbiAgICAgIG1hcmtlci5hZGRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGluZm9XaW5kb3cub3BlbihtYXAsIG1hcmtlcik7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/blocks/google-maps/script.js\n");

/***/ }),

/***/ "./src/blocks/image-comparison/script.js":
/*!***********************************************!*\
  !*** ./src/blocks/image-comparison/script.js ***!
  \***********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var zurb_twentytwenty_js_jquery_event_move__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zurb-twentytwenty/js/jquery.event.move */ \"./node_modules/zurb-twentytwenty/js/jquery.event.move.js\");\n/* harmony import */ var zurb_twentytwenty_js_jquery_event_move__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(zurb_twentytwenty_js_jquery_event_move__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var zurb_twentytwenty_js_jquery_twentytwenty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zurb-twentytwenty/js/jquery.twentytwenty */ \"./node_modules/zurb-twentytwenty/js/jquery.twentytwenty.js\");\n/* harmony import */ var zurb_twentytwenty_js_jquery_twentytwenty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(zurb_twentytwenty_js_jquery_twentytwenty__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\njquery__WEBPACK_IMPORTED_MODULE_0___default()(function ($) {\n  $(window).load(function () {\n    $('.wp-block-gutenbee-image-comparison').each(function () {\n      var $this = $(this);\n\n      $this.twentytwenty({\n        default_offset_pct: $this.data('offset') / 100\n      });\n    });\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cC5bbmFtZV0vLi9zcmMvYmxvY2tzL2ltYWdlLWNvbXBhcmlzb24vc2NyaXB0LmpzPzgxZDAiXSwibmFtZXMiOlsialF1ZXJ5IiwiJCIsIndpbmRvdyIsImxvYWQiLCJlYWNoIiwiJHRoaXMiLCJ0d2VudHl0d2VudHkiLCJkZWZhdWx0X29mZnNldF9wY3QiLCJkYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBOztBQUVBLDZDQUFBQSxDQUFPLGFBQUs7QUFDVkMsSUFBRUMsTUFBRixFQUFVQyxJQUFWLENBQWUsWUFBTTtBQUNuQkYsTUFBRSxxQ0FBRixFQUF5Q0csSUFBekMsQ0FBOEMsWUFBVztBQUN2RCxVQUFNQyxRQUFRSixFQUFFLElBQUYsQ0FBZDs7QUFFQUksWUFBTUMsWUFBTixDQUFtQjtBQUNqQkMsNEJBQW9CRixNQUFNRyxJQUFOLENBQVcsUUFBWCxJQUF1QjtBQUQxQixPQUFuQjtBQUdELEtBTkQ7QUFPRCxHQVJEO0FBU0QsQ0FWRCIsImZpbGUiOiIuL3NyYy9ibG9ja3MvaW1hZ2UtY29tcGFyaXNvbi9zY3JpcHQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgalF1ZXJ5IGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgJ3p1cmItdHdlbnR5dHdlbnR5L2pzL2pxdWVyeS5ldmVudC5tb3ZlJztcbmltcG9ydCAnenVyYi10d2VudHl0d2VudHkvanMvanF1ZXJ5LnR3ZW50eXR3ZW50eSc7XG5cbmpRdWVyeSgkID0+IHtcbiAgJCh3aW5kb3cpLmxvYWQoKCkgPT4ge1xuICAgICQoJy53cC1ibG9jay1ndXRlbmJlZS1pbWFnZS1jb21wYXJpc29uJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0ICR0aGlzID0gJCh0aGlzKTtcblxuICAgICAgJHRoaXMudHdlbnR5dHdlbnR5KHtcbiAgICAgICAgZGVmYXVsdF9vZmZzZXRfcGN0OiAkdGhpcy5kYXRhKCdvZmZzZXQnKSAvIDEwMCxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/blocks/image-comparison/script.js\n");

/***/ }),

/***/ "./src/blocks/justified-gallery/script.js":
/*!************************************************!*\
  !*** ./src/blocks/justified-gallery/script.js ***!
  \************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var justifiedGallery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! justifiedGallery */ \"./node_modules/justifiedGallery/dist/js/jquery.justifiedGallery.js\");\n/* harmony import */ var justifiedGallery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(justifiedGallery__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\njquery__WEBPACK_IMPORTED_MODULE_0___default()(function ($) {\n  var $justifiedGallery = $('.wp-block-gutenbee-justified-gallery');\n\n  $justifiedGallery.each(function () {\n    var $this = $(this);\n\n    $this.justifiedGallery({\n      rowHeight: $this.data('row-height'),\n      margins: $this.data('margins'),\n      lastRow: $this.data('last-row'),\n      randomize: $this.data('randomize')\n    });\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cC5bbmFtZV0vLi9zcmMvYmxvY2tzL2p1c3RpZmllZC1nYWxsZXJ5L3NjcmlwdC5qcz8xYzc1Il0sIm5hbWVzIjpbImpRdWVyeSIsIiRqdXN0aWZpZWRHYWxsZXJ5IiwiJCIsImVhY2giLCIkdGhpcyIsImp1c3RpZmllZEdhbGxlcnkiLCJyb3dIZWlnaHQiLCJkYXRhIiwibWFyZ2lucyIsImxhc3RSb3ciLCJyYW5kb21pemUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTs7QUFFQSw2Q0FBQUEsQ0FBTyxhQUFLO0FBQ1YsTUFBTUMsb0JBQW9CQyxFQUFFLHNDQUFGLENBQTFCOztBQUVBRCxvQkFBa0JFLElBQWxCLENBQXVCLFlBQVc7QUFDaEMsUUFBTUMsUUFBUUYsRUFBRSxJQUFGLENBQWQ7O0FBRUFFLFVBQU1DLGdCQUFOLENBQXVCO0FBQ3JCQyxpQkFBV0YsTUFBTUcsSUFBTixDQUFXLFlBQVgsQ0FEVTtBQUVyQkMsZUFBU0osTUFBTUcsSUFBTixDQUFXLFNBQVgsQ0FGWTtBQUdyQkUsZUFBU0wsTUFBTUcsSUFBTixDQUFXLFVBQVgsQ0FIWTtBQUlyQkcsaUJBQVdOLE1BQU1HLElBQU4sQ0FBVyxXQUFYO0FBSlUsS0FBdkI7QUFNRCxHQVREO0FBVUQsQ0FiRCIsImZpbGUiOiIuL3NyYy9ibG9ja3MvanVzdGlmaWVkLWdhbGxlcnkvc2NyaXB0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGpRdWVyeSBmcm9tICdqcXVlcnknO1xuaW1wb3J0ICdqdXN0aWZpZWRHYWxsZXJ5JztcblxualF1ZXJ5KCQgPT4ge1xuICBjb25zdCAkanVzdGlmaWVkR2FsbGVyeSA9ICQoJy53cC1ibG9jay1ndXRlbmJlZS1qdXN0aWZpZWQtZ2FsbGVyeScpO1xuXG4gICRqdXN0aWZpZWRHYWxsZXJ5LmVhY2goZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgJHRoaXMgPSAkKHRoaXMpO1xuXG4gICAgJHRoaXMuanVzdGlmaWVkR2FsbGVyeSh7XG4gICAgICByb3dIZWlnaHQ6ICR0aGlzLmRhdGEoJ3Jvdy1oZWlnaHQnKSxcbiAgICAgIG1hcmdpbnM6ICR0aGlzLmRhdGEoJ21hcmdpbnMnKSxcbiAgICAgIGxhc3RSb3c6ICR0aGlzLmRhdGEoJ2xhc3Qtcm93JyksXG4gICAgICByYW5kb21pemU6ICR0aGlzLmRhdGEoJ3JhbmRvbWl6ZScpLFxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/blocks/justified-gallery/script.js\n");

/***/ }),

/***/ "./src/blocks/slideshow/script.js":
/*!****************************************!*\
  !*** ./src/blocks/slideshow/script.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! slick-carousel */ \"./node_modules/slick-carousel/slick/slick.js\");\n/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(slick_carousel__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\njquery__WEBPACK_IMPORTED_MODULE_0___default()(function ($) {\n  var $window = $(window);\n\n  $window.on('load', function () {\n    var $slideshow = $('.wp-block-gutenbee-slideshow');\n\n    $slideshow.each(function () {\n      var $this = $(this);\n\n      $this.slick({\n        arrows: $this.data('arrows'),\n        dots: $this.data('dots'),\n        autoplay: $this.data('autoplay'),\n        fade: $this.data('fade'),\n        infinite: $this.data('infinite'),\n        speed: $this.data('speed'),\n        autoplaySpeed: $this.data('autoplay-speed'),\n        slidesToScroll: $this.data('slides-to-scroll'),\n        slidesToShow: $this.data('slides-to-show'),\n        pauseOnHover: $this.data('pause-on-hover'),\n        customPaging: function customPaging() {\n          return $('<button type=\"button\" />').css({\n            backgroundColor: $this.data('dots-color')\n          });\n        }\n      });\n    });\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cC5bbmFtZV0vLi9zcmMvYmxvY2tzL3NsaWRlc2hvdy9zY3JpcHQuanM/NGY1ZCJdLCJuYW1lcyI6WyJqUXVlcnkiLCIkd2luZG93IiwiJCIsIndpbmRvdyIsIm9uIiwiJHNsaWRlc2hvdyIsImVhY2giLCIkdGhpcyIsInNsaWNrIiwiYXJyb3dzIiwiZGF0YSIsImRvdHMiLCJhdXRvcGxheSIsImZhZGUiLCJpbmZpbml0ZSIsInNwZWVkIiwiYXV0b3BsYXlTcGVlZCIsInNsaWRlc1RvU2Nyb2xsIiwic2xpZGVzVG9TaG93IiwicGF1c2VPbkhvdmVyIiwiY3VzdG9tUGFnaW5nIiwiY3NzIiwiYmFja2dyb3VuZENvbG9yIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7O0FBRUEsNkNBQUFBLENBQU8sYUFBSztBQUNWLE1BQU1DLFVBQVVDLEVBQUVDLE1BQUYsQ0FBaEI7O0FBRUFGLFVBQVFHLEVBQVIsQ0FBVyxNQUFYLEVBQW1CLFlBQU07QUFDdkIsUUFBTUMsYUFBYUgsRUFBRSw4QkFBRixDQUFuQjs7QUFFQUcsZUFBV0MsSUFBWCxDQUFnQixZQUFXO0FBQ3pCLFVBQU1DLFFBQVFMLEVBQUUsSUFBRixDQUFkOztBQUVBSyxZQUFNQyxLQUFOLENBQVk7QUFDVkMsZ0JBQVFGLE1BQU1HLElBQU4sQ0FBVyxRQUFYLENBREU7QUFFVkMsY0FBTUosTUFBTUcsSUFBTixDQUFXLE1BQVgsQ0FGSTtBQUdWRSxrQkFBVUwsTUFBTUcsSUFBTixDQUFXLFVBQVgsQ0FIQTtBQUlWRyxjQUFNTixNQUFNRyxJQUFOLENBQVcsTUFBWCxDQUpJO0FBS1ZJLGtCQUFVUCxNQUFNRyxJQUFOLENBQVcsVUFBWCxDQUxBO0FBTVZLLGVBQU9SLE1BQU1HLElBQU4sQ0FBVyxPQUFYLENBTkc7QUFPVk0sdUJBQWVULE1BQU1HLElBQU4sQ0FBVyxnQkFBWCxDQVBMO0FBUVZPLHdCQUFnQlYsTUFBTUcsSUFBTixDQUFXLGtCQUFYLENBUk47QUFTVlEsc0JBQWNYLE1BQU1HLElBQU4sQ0FBVyxnQkFBWCxDQVRKO0FBVVZTLHNCQUFjWixNQUFNRyxJQUFOLENBQVcsZ0JBQVgsQ0FWSjtBQVdWVSxzQkFBYyx3QkFBTTtBQUNsQixpQkFBT2xCLEVBQUUsMEJBQUYsRUFBOEJtQixHQUE5QixDQUFrQztBQUN2Q0MsNkJBQWlCZixNQUFNRyxJQUFOLENBQVcsWUFBWDtBQURzQixXQUFsQyxDQUFQO0FBR0Q7QUFmUyxPQUFaO0FBaUJELEtBcEJEO0FBcUJELEdBeEJEO0FBeUJELENBNUJEIiwiZmlsZSI6Ii4vc3JjL2Jsb2Nrcy9zbGlkZXNob3cvc2NyaXB0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGpRdWVyeSBmcm9tICdqcXVlcnknO1xuaW1wb3J0ICdzbGljay1jYXJvdXNlbCc7XG5cbmpRdWVyeSgkID0+IHtcbiAgY29uc3QgJHdpbmRvdyA9ICQod2luZG93KTtcblxuICAkd2luZG93Lm9uKCdsb2FkJywgKCkgPT4ge1xuICAgIGNvbnN0ICRzbGlkZXNob3cgPSAkKCcud3AtYmxvY2stZ3V0ZW5iZWUtc2xpZGVzaG93Jyk7XG5cbiAgICAkc2xpZGVzaG93LmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCAkdGhpcyA9ICQodGhpcyk7XG5cbiAgICAgICR0aGlzLnNsaWNrKHtcbiAgICAgICAgYXJyb3dzOiAkdGhpcy5kYXRhKCdhcnJvd3MnKSxcbiAgICAgICAgZG90czogJHRoaXMuZGF0YSgnZG90cycpLFxuICAgICAgICBhdXRvcGxheTogJHRoaXMuZGF0YSgnYXV0b3BsYXknKSxcbiAgICAgICAgZmFkZTogJHRoaXMuZGF0YSgnZmFkZScpLFxuICAgICAgICBpbmZpbml0ZTogJHRoaXMuZGF0YSgnaW5maW5pdGUnKSxcbiAgICAgICAgc3BlZWQ6ICR0aGlzLmRhdGEoJ3NwZWVkJyksXG4gICAgICAgIGF1dG9wbGF5U3BlZWQ6ICR0aGlzLmRhdGEoJ2F1dG9wbGF5LXNwZWVkJyksXG4gICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAkdGhpcy5kYXRhKCdzbGlkZXMtdG8tc2Nyb2xsJyksXG4gICAgICAgIHNsaWRlc1RvU2hvdzogJHRoaXMuZGF0YSgnc2xpZGVzLXRvLXNob3cnKSxcbiAgICAgICAgcGF1c2VPbkhvdmVyOiAkdGhpcy5kYXRhKCdwYXVzZS1vbi1ob3ZlcicpLFxuICAgICAgICBjdXN0b21QYWdpbmc6ICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gJCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgLz4nKS5jc3Moe1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAkdGhpcy5kYXRhKCdkb3RzLWNvbG9yJyksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/blocks/slideshow/script.js\n");

/***/ }),

/***/ "./src/blocks/tabs/script.js":
/*!***********************************!*\
  !*** ./src/blocks/tabs/script.js ***!
  \***********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n\n\njquery__WEBPACK_IMPORTED_MODULE_0___default()(function ($) {\n  var prefix = 'wp-block-gutenbee-tabs';\n  var $tabs = $('.' + prefix);\n\n  $tabs.each(function () {\n    var $this = $(this);\n    var $titles = $this.find('.' + prefix + '-nav-item');\n    var $tabContents = $this.find('.' + prefix + '-tab-content');\n\n    $titles.on('click', function (event) {\n      event.preventDefault();\n      var $title = $(this);\n      var index = $title.index();\n\n      $title.addClass(prefix + '-nav-item-active').siblings().removeClass(prefix + '-nav-item-active');\n      $tabContents.hide();\n      $tabContents.eq(index).fadeIn('fast');\n    });\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cC5bbmFtZV0vLi9zcmMvYmxvY2tzL3RhYnMvc2NyaXB0LmpzPzhmM2UiXSwibmFtZXMiOlsialF1ZXJ5IiwicHJlZml4IiwiJHRhYnMiLCIkIiwiZWFjaCIsIiR0aGlzIiwiJHRpdGxlcyIsImZpbmQiLCIkdGFiQ29udGVudHMiLCJvbiIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCIkdGl0bGUiLCJpbmRleCIsImFkZENsYXNzIiwic2libGluZ3MiLCJyZW1vdmVDbGFzcyIsImhpZGUiLCJlcSIsImZhZGVJbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7O0FBRUEsNkNBQUFBLENBQU8sYUFBSztBQUNWLE1BQU1DLFNBQVMsd0JBQWY7QUFDQSxNQUFNQyxRQUFRQyxRQUFNRixNQUFOLENBQWQ7O0FBRUFDLFFBQU1FLElBQU4sQ0FBVyxZQUFXO0FBQ3BCLFFBQU1DLFFBQVFGLEVBQUUsSUFBRixDQUFkO0FBQ0EsUUFBTUcsVUFBVUQsTUFBTUUsSUFBTixPQUFlTixNQUFmLGVBQWhCO0FBQ0EsUUFBTU8sZUFBZUgsTUFBTUUsSUFBTixPQUFlTixNQUFmLGtCQUFyQjs7QUFFQUssWUFBUUcsRUFBUixDQUFXLE9BQVgsRUFBb0IsVUFBU0MsS0FBVCxFQUFnQjtBQUNsQ0EsWUFBTUMsY0FBTjtBQUNBLFVBQU1DLFNBQVNULEVBQUUsSUFBRixDQUFmO0FBQ0EsVUFBTVUsUUFBUUQsT0FBT0MsS0FBUCxFQUFkOztBQUVBRCxhQUNHRSxRQURILENBQ2ViLE1BRGYsdUJBRUdjLFFBRkgsR0FHR0MsV0FISCxDQUdrQmYsTUFIbEI7QUFJQU8sbUJBQWFTLElBQWI7QUFDQVQsbUJBQWFVLEVBQWIsQ0FBZ0JMLEtBQWhCLEVBQXVCTSxNQUF2QixDQUE4QixNQUE5QjtBQUNELEtBWEQ7QUFZRCxHQWpCRDtBQWtCRCxDQXRCRCIsImZpbGUiOiIuL3NyYy9ibG9ja3MvdGFicy9zY3JpcHQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgalF1ZXJ5IGZyb20gJ2pxdWVyeSc7XG5cbmpRdWVyeSgkID0+IHtcbiAgY29uc3QgcHJlZml4ID0gJ3dwLWJsb2NrLWd1dGVuYmVlLXRhYnMnO1xuICBjb25zdCAkdGFicyA9ICQoYC4ke3ByZWZpeH1gKTtcblxuICAkdGFicy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0ICR0aGlzID0gJCh0aGlzKTtcbiAgICBjb25zdCAkdGl0bGVzID0gJHRoaXMuZmluZChgLiR7cHJlZml4fS1uYXYtaXRlbWApO1xuICAgIGNvbnN0ICR0YWJDb250ZW50cyA9ICR0aGlzLmZpbmQoYC4ke3ByZWZpeH0tdGFiLWNvbnRlbnRgKTtcblxuICAgICR0aXRsZXMub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCAkdGl0bGUgPSAkKHRoaXMpO1xuICAgICAgY29uc3QgaW5kZXggPSAkdGl0bGUuaW5kZXgoKTtcblxuICAgICAgJHRpdGxlXG4gICAgICAgIC5hZGRDbGFzcyhgJHtwcmVmaXh9LW5hdi1pdGVtLWFjdGl2ZWApXG4gICAgICAgIC5zaWJsaW5ncygpXG4gICAgICAgIC5yZW1vdmVDbGFzcyhgJHtwcmVmaXh9LW5hdi1pdGVtLWFjdGl2ZWApO1xuICAgICAgJHRhYkNvbnRlbnRzLmhpZGUoKTtcbiAgICAgICR0YWJDb250ZW50cy5lcShpbmRleCkuZmFkZUluKCdmYXN0Jyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/blocks/tabs/script.js\n");

/***/ }),

/***/ "./src/components/controls/background-controls/script.js":
/*!***************************************************************!*\
  !*** ./src/components/controls/background-controls/script.js ***!
  \***************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n\n\njquery__WEBPACK_IMPORTED_MODULE_0___default()(function ($) {\n  var $window = $(window);\n\n  $.fn.gutenbeeParallax = function (opts) {\n    var options = $.extend({}, {\n      speed: null,\n      direction: null\n    }, opts);\n\n    var $elements = this.each(function () {\n      var $this = $(this);\n      var speed = options.speed || $this.data('parallax-speed');\n\n      $this.css({ height: 100 + speed * 100 + '%' });\n    });\n\n    function update() {\n      var wheight = $window.height();\n      var wscroll = $window.scrollTop();\n\n      $elements.each(function () {\n        var $this = $(this);\n        var $parent = $this.parent();\n        var elHeight = $parent.outerHeight();\n        var heightDelta = $this.outerHeight() - elHeight;\n        var elTop = $parent.offset().top + elHeight;\n\n        var scrollPercentage = (elTop - wscroll) / (wheight + elHeight);\n        var ypos = (scrollPercentage - 1) * heightDelta;\n\n        $this.css({\n          transform: 'translateY(' + ypos + 'px)'\n        });\n      });\n    }\n\n    var requestParallaxUpdate = function requestParallaxUpdate() {\n      window.requestAnimationFrame(update);\n    };\n\n    $window.on('scroll', requestParallaxUpdate).on('resize', requestParallaxUpdate);\n\n    update();\n\n    $.fn.gutenbeeParallax.destroy = function () {\n      $elements.each(function () {\n        var $this = $(this);\n        $this.css({ height: '100%', transform: 'none' });\n      });\n\n      $window.off('scroll', requestParallaxUpdate).off('resize', requestParallaxUpdate);\n    };\n\n    return $elements;\n  };\n\n  $('.gutenbee-parallax').gutenbeeParallax();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cC5bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb250cm9scy9iYWNrZ3JvdW5kLWNvbnRyb2xzL3NjcmlwdC5qcz8wNjhlIl0sIm5hbWVzIjpbImpRdWVyeSIsIiR3aW5kb3ciLCIkIiwid2luZG93IiwiZm4iLCJndXRlbmJlZVBhcmFsbGF4Iiwib3B0cyIsIm9wdGlvbnMiLCJleHRlbmQiLCJzcGVlZCIsImRpcmVjdGlvbiIsIiRlbGVtZW50cyIsImVhY2giLCIkdGhpcyIsImRhdGEiLCJjc3MiLCJoZWlnaHQiLCJ1cGRhdGUiLCJ3aGVpZ2h0Iiwid3Njcm9sbCIsInNjcm9sbFRvcCIsIiRwYXJlbnQiLCJwYXJlbnQiLCJlbEhlaWdodCIsIm91dGVySGVpZ2h0IiwiaGVpZ2h0RGVsdGEiLCJlbFRvcCIsIm9mZnNldCIsInRvcCIsInNjcm9sbFBlcmNlbnRhZ2UiLCJ5cG9zIiwidHJhbnNmb3JtIiwicmVxdWVzdFBhcmFsbGF4VXBkYXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib24iLCJkZXN0cm95Iiwib2ZmIl0sIm1hcHBpbmdzIjoiOzs7QUFBQTs7QUFFQSw2Q0FBQUEsQ0FBTyxhQUFLO0FBQ1YsTUFBSUMsVUFBVUMsRUFBRUMsTUFBRixDQUFkOztBQUVBRCxJQUFFRSxFQUFGLENBQUtDLGdCQUFMLEdBQXdCLFVBQVNDLElBQVQsRUFBZTtBQUNyQyxRQUFJQyxVQUFVTCxFQUFFTSxNQUFGLENBQ1osRUFEWSxFQUVaO0FBQ0VDLGFBQU8sSUFEVDtBQUVFQyxpQkFBVztBQUZiLEtBRlksRUFNWkosSUFOWSxDQUFkOztBQVNBLFFBQUlLLFlBQVksS0FBS0MsSUFBTCxDQUFVLFlBQVc7QUFDbkMsVUFBSUMsUUFBUVgsRUFBRSxJQUFGLENBQVo7QUFDQSxVQUFJTyxRQUFRRixRQUFRRSxLQUFSLElBQWlCSSxNQUFNQyxJQUFOLENBQVcsZ0JBQVgsQ0FBN0I7O0FBRUFELFlBQU1FLEdBQU4sQ0FBVSxFQUFFQyxRQUFRLE1BQU1QLFFBQVEsR0FBZCxHQUFvQixHQUE5QixFQUFWO0FBQ0QsS0FMZSxDQUFoQjs7QUFPQSxhQUFTUSxNQUFULEdBQWtCO0FBQ2hCLFVBQUlDLFVBQVVqQixRQUFRZSxNQUFSLEVBQWQ7QUFDQSxVQUFJRyxVQUFVbEIsUUFBUW1CLFNBQVIsRUFBZDs7QUFFQVQsZ0JBQVVDLElBQVYsQ0FBZSxZQUFXO0FBQ3hCLFlBQUlDLFFBQVFYLEVBQUUsSUFBRixDQUFaO0FBQ0EsWUFBSW1CLFVBQVVSLE1BQU1TLE1BQU4sRUFBZDtBQUNBLFlBQUlDLFdBQVdGLFFBQVFHLFdBQVIsRUFBZjtBQUNBLFlBQUlDLGNBQWNaLE1BQU1XLFdBQU4sS0FBc0JELFFBQXhDO0FBQ0EsWUFBSUcsUUFBUUwsUUFBUU0sTUFBUixHQUFpQkMsR0FBakIsR0FBdUJMLFFBQW5DOztBQUVBLFlBQUlNLG1CQUFtQixDQUFDSCxRQUFRUCxPQUFULEtBQXFCRCxVQUFVSyxRQUEvQixDQUF2QjtBQUNBLFlBQUlPLE9BQU8sQ0FBQ0QsbUJBQW1CLENBQXBCLElBQXlCSixXQUFwQzs7QUFFQVosY0FBTUUsR0FBTixDQUFVO0FBQ1JnQixxQkFBVyxnQkFBZ0JELElBQWhCLEdBQXVCO0FBRDFCLFNBQVY7QUFHRCxPQWJEO0FBY0Q7O0FBRUQsUUFBSUUsd0JBQXdCLFNBQXhCQSxxQkFBd0IsR0FBVztBQUNyQzdCLGFBQU84QixxQkFBUCxDQUE2QmhCLE1BQTdCO0FBQ0QsS0FGRDs7QUFJQWhCLFlBQ0dpQyxFQURILENBQ00sUUFETixFQUNnQkYscUJBRGhCLEVBRUdFLEVBRkgsQ0FFTSxRQUZOLEVBRWdCRixxQkFGaEI7O0FBSUFmOztBQUVBZixNQUFFRSxFQUFGLENBQUtDLGdCQUFMLENBQXNCOEIsT0FBdEIsR0FBZ0MsWUFBVztBQUN6Q3hCLGdCQUFVQyxJQUFWLENBQWUsWUFBVztBQUN4QixZQUFJQyxRQUFRWCxFQUFFLElBQUYsQ0FBWjtBQUNBVyxjQUFNRSxHQUFOLENBQVUsRUFBRUMsUUFBUSxNQUFWLEVBQWtCZSxXQUFXLE1BQTdCLEVBQVY7QUFDRCxPQUhEOztBQUtBOUIsY0FDR21DLEdBREgsQ0FDTyxRQURQLEVBQ2lCSixxQkFEakIsRUFFR0ksR0FGSCxDQUVPLFFBRlAsRUFFaUJKLHFCQUZqQjtBQUdELEtBVEQ7O0FBV0EsV0FBT3JCLFNBQVA7QUFDRCxHQTNERDs7QUE2REFULElBQUUsb0JBQUYsRUFBd0JHLGdCQUF4QjtBQUNELENBakVEIiwiZmlsZSI6Ii4vc3JjL2NvbXBvbmVudHMvY29udHJvbHMvYmFja2dyb3VuZC1jb250cm9scy9zY3JpcHQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgalF1ZXJ5IGZyb20gJ2pxdWVyeSc7XG5cbmpRdWVyeSgkID0+IHtcbiAgdmFyICR3aW5kb3cgPSAkKHdpbmRvdyk7XG5cbiAgJC5mbi5ndXRlbmJlZVBhcmFsbGF4ID0gZnVuY3Rpb24ob3B0cykge1xuICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoXG4gICAgICB7fSxcbiAgICAgIHtcbiAgICAgICAgc3BlZWQ6IG51bGwsXG4gICAgICAgIGRpcmVjdGlvbjogbnVsbCxcbiAgICAgIH0sXG4gICAgICBvcHRzLFxuICAgICk7XG5cbiAgICB2YXIgJGVsZW1lbnRzID0gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgIHZhciBzcGVlZCA9IG9wdGlvbnMuc3BlZWQgfHwgJHRoaXMuZGF0YSgncGFyYWxsYXgtc3BlZWQnKTtcblxuICAgICAgJHRoaXMuY3NzKHsgaGVpZ2h0OiAxMDAgKyBzcGVlZCAqIDEwMCArICclJyB9KTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHZhciB3aGVpZ2h0ID0gJHdpbmRvdy5oZWlnaHQoKTtcbiAgICAgIHZhciB3c2Nyb2xsID0gJHdpbmRvdy5zY3JvbGxUb3AoKTtcblxuICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICAgIHZhciAkcGFyZW50ID0gJHRoaXMucGFyZW50KCk7XG4gICAgICAgIHZhciBlbEhlaWdodCA9ICRwYXJlbnQub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgdmFyIGhlaWdodERlbHRhID0gJHRoaXMub3V0ZXJIZWlnaHQoKSAtIGVsSGVpZ2h0O1xuICAgICAgICB2YXIgZWxUb3AgPSAkcGFyZW50Lm9mZnNldCgpLnRvcCArIGVsSGVpZ2h0O1xuXG4gICAgICAgIHZhciBzY3JvbGxQZXJjZW50YWdlID0gKGVsVG9wIC0gd3Njcm9sbCkgLyAod2hlaWdodCArIGVsSGVpZ2h0KTtcbiAgICAgICAgdmFyIHlwb3MgPSAoc2Nyb2xsUGVyY2VudGFnZSAtIDEpICogaGVpZ2h0RGVsdGE7XG5cbiAgICAgICAgJHRoaXMuY3NzKHtcbiAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKCcgKyB5cG9zICsgJ3B4KScsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3RQYXJhbGxheFVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpO1xuICAgIH07XG5cbiAgICAkd2luZG93XG4gICAgICAub24oJ3Njcm9sbCcsIHJlcXVlc3RQYXJhbGxheFVwZGF0ZSlcbiAgICAgIC5vbigncmVzaXplJywgcmVxdWVzdFBhcmFsbGF4VXBkYXRlKTtcblxuICAgIHVwZGF0ZSgpO1xuXG4gICAgJC5mbi5ndXRlbmJlZVBhcmFsbGF4LmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgICRlbGVtZW50cy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICAkdGhpcy5jc3MoeyBoZWlnaHQ6ICcxMDAlJywgdHJhbnNmb3JtOiAnbm9uZScgfSk7XG4gICAgICB9KTtcblxuICAgICAgJHdpbmRvd1xuICAgICAgICAub2ZmKCdzY3JvbGwnLCByZXF1ZXN0UGFyYWxsYXhVcGRhdGUpXG4gICAgICAgIC5vZmYoJ3Jlc2l6ZScsIHJlcXVlc3RQYXJhbGxheFVwZGF0ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiAkZWxlbWVudHM7XG4gIH07XG5cbiAgJCgnLmd1dGVuYmVlLXBhcmFsbGF4JykuZ3V0ZW5iZWVQYXJhbGxheCgpO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/controls/background-controls/script.js\n");

/***/ }),

/***/ "./src/frontend.js":
/*!*************************!*\
  !*** ./src/frontend.js ***!
  \*************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _styles_style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/style.scss */ \"./src/styles/style.scss\");\n/* harmony import */ var _styles_style_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_styles_style_scss__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_controls_background_controls_script__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/controls/background-controls/script */ \"./src/components/controls/background-controls/script.js\");\n/* harmony import */ var _blocks_slideshow_script__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./blocks/slideshow/script */ \"./src/blocks/slideshow/script.js\");\n/* harmony import */ var _blocks_countup_script__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./blocks/countup/script */ \"./src/blocks/countup/script.js\");\n/* harmony import */ var _blocks_justified_gallery_script__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./blocks/justified-gallery/script */ \"./src/blocks/justified-gallery/script.js\");\n/* harmony import */ var _blocks_google_maps_script__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./blocks/google-maps/script */ \"./src/blocks/google-maps/script.js\");\n/* harmony import */ var _blocks_countdown_script__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./blocks/countdown/script */ \"./src/blocks/countdown/script.js\");\n/* harmony import */ var _blocks_image_comparison_script__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./blocks/image-comparison/script */ \"./src/blocks/image-comparison/script.js\");\n/* harmony import */ var _blocks_accordion_script__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./blocks/accordion/script */ \"./src/blocks/accordion/script.js\");\n/* harmony import */ var _blocks_tabs_script__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./blocks/tabs/script */ \"./src/blocks/tabs/script.js\");\n//\n// Stylesheets\n//\n\n\n//\n// Control scripts\n//\n\n\n//\n// Block scripts\n//\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cC5bbmFtZV0vLi9zcmMvZnJvbnRlbmQuanM/ODY4NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9zcmMvZnJvbnRlbmQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLy8gU3R5bGVzaGVldHNcbi8vXG5pbXBvcnQgJy4vc3R5bGVzL3N0eWxlLnNjc3MnO1xuXG4vL1xuLy8gQ29udHJvbCBzY3JpcHRzXG4vL1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvY29udHJvbHMvYmFja2dyb3VuZC1jb250cm9scy9zY3JpcHQnO1xuXG4vL1xuLy8gQmxvY2sgc2NyaXB0c1xuLy9cbmltcG9ydCAnLi9ibG9ja3Mvc2xpZGVzaG93L3NjcmlwdCc7XG5pbXBvcnQgJy4vYmxvY2tzL2NvdW50dXAvc2NyaXB0JztcbmltcG9ydCAnLi9ibG9ja3MvanVzdGlmaWVkLWdhbGxlcnkvc2NyaXB0JztcbmltcG9ydCAnLi9ibG9ja3MvZ29vZ2xlLW1hcHMvc2NyaXB0JztcbmltcG9ydCAnLi9ibG9ja3MvY291bnRkb3duL3NjcmlwdCc7XG5pbXBvcnQgJy4vYmxvY2tzL2ltYWdlLWNvbXBhcmlzb24vc2NyaXB0JztcbmltcG9ydCAnLi9ibG9ja3MvYWNjb3JkaW9uL3NjcmlwdCc7XG5pbXBvcnQgJy4vYmxvY2tzL3RhYnMvc2NyaXB0JztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/frontend.js\n");

/***/ }),

/***/ "./src/styles/style.scss":
/*!*******************************!*\
  !*** ./src/styles/style.scss ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cC5bbmFtZV0vLi9zcmMvc3R5bGVzL3N0eWxlLnNjc3M/MGQ1NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9zdHlsZXMvc3R5bGUuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/styles/style.scss\n");

/***/ }),

/***/ "./src/util/CountdownTimer.js":
/*!************************************!*\
  !*** ./src/util/CountdownTimer.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CountdownTimer = function () {\n  /**\n   * @constructor\n   *\n   * @param {HTMLElement} element HTML Element to attach the timer on\n   * @param {string} endTime The end time\n   */\n  function CountdownTimer(element, endTime) {\n    var _this = this;\n\n    _classCallCheck(this, CountdownTimer);\n\n    this.clock = element;\n    this.updateClock(endTime);\n    this.interval = setInterval(function () {\n      _this.updateClock(endTime);\n    }, 1000);\n  }\n\n  /**\n   * Calculates remaining time from the present moment to `endDate`\n   *\n   * @static\n   * @param {string} endTime The end time\n   * @returns {{total: number, days: number, hours: number, minutes: number, seconds: number}} Total time remaining\n   */\n\n\n  _createClass(CountdownTimer, [{\n    key: 'updateClock',\n\n\n    /**\n     * Updates the HTML element\n     *\n     * @param {string} endTime The end time\n     * @returns {undefined}\n     * @returns {undefined}\n     */\n    value: function updateClock(endTime) {\n      var daysSpan = this.clock.querySelector('.gutenbee-countdown-days');\n      var hoursSpan = this.clock.querySelector('.gutenbee-countdown-hours');\n      var minutesSpan = this.clock.querySelector('.gutenbee-countdown-minutes');\n      var secondsSpan = this.clock.querySelector('.gutenbee-countdown-seconds');\n      var t = CountdownTimer.getRemainingTime(endTime);\n\n      if (daysSpan) {\n        daysSpan.innerHTML = t.days;\n      }\n\n      if (hoursSpan) {\n        hoursSpan.innerHTML = ('0' + t.hours).slice(-2);\n      }\n\n      if (minutesSpan) {\n        minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);\n      }\n\n      if (secondsSpan) {\n        secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);\n      }\n\n      if (t.total <= 0) {\n        this.stop();\n      }\n    }\n\n    /**\n     * Stops the countdown\n     *\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      clearInterval(this.interval);\n    }\n\n    /**\n     * \"Destroys\" the instance\n     *\n     * @returns {undefined}\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.stop();\n      this.clock = null;\n      this.interval = null;\n    }\n  }]);\n\n  return CountdownTimer;\n}();\n\nCountdownTimer.getRemainingTime = function (endTime) {\n  var t = Date.parse(endTime) - Date.parse(new Date());\n  var seconds = Math.floor(t / 1000 % 60);\n  var minutes = Math.floor(t / 1000 / 60 % 60);\n  var hours = Math.floor(t / (1000 * 60 * 60) % 24);\n  var days = Math.floor(t / (1000 * 60 * 60 * 24));\n\n  return {\n    total: t,\n    days: days <= 0 ? 0 : days,\n    hours: hours <= 0 ? 0 : hours,\n    minutes: minutes <= 0 ? 0 : minutes,\n    seconds: seconds <= 0 ? 0 : seconds\n  };\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CountdownTimer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cC5bbmFtZV0vLi9zcmMvdXRpbC9Db3VudGRvd25UaW1lci5qcz8yMDhlIl0sIm5hbWVzIjpbIkNvdW50ZG93blRpbWVyIiwiZWxlbWVudCIsImVuZFRpbWUiLCJjbG9jayIsInVwZGF0ZUNsb2NrIiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImRheXNTcGFuIiwicXVlcnlTZWxlY3RvciIsImhvdXJzU3BhbiIsIm1pbnV0ZXNTcGFuIiwic2Vjb25kc1NwYW4iLCJ0IiwiZ2V0UmVtYWluaW5nVGltZSIsImlubmVySFRNTCIsImRheXMiLCJob3VycyIsInNsaWNlIiwibWludXRlcyIsInNlY29uZHMiLCJ0b3RhbCIsInN0b3AiLCJjbGVhckludGVydmFsIiwiRGF0ZSIsInBhcnNlIiwiTWF0aCIsImZsb29yIl0sIm1hcHBpbmdzIjoiOzs7OztJQUFNQSxjO0FBQ0o7Ozs7OztBQU1BLDBCQUFZQyxPQUFaLEVBQXFCQyxPQUFyQixFQUE4QjtBQUFBOztBQUFBOztBQUM1QixTQUFLQyxLQUFMLEdBQWFGLE9BQWI7QUFDQSxTQUFLRyxXQUFMLENBQWlCRixPQUFqQjtBQUNBLFNBQUtHLFFBQUwsR0FBZ0JDLFlBQVksWUFBTTtBQUNoQyxZQUFLRixXQUFMLENBQWlCRixPQUFqQjtBQUNELEtBRmUsRUFFYixJQUZhLENBQWhCO0FBR0Q7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7QUF1QkE7Ozs7Ozs7Z0NBT1lBLE8sRUFBUztBQUNuQixVQUFNSyxXQUFXLEtBQUtKLEtBQUwsQ0FBV0ssYUFBWCxDQUF5QiwwQkFBekIsQ0FBakI7QUFDQSxVQUFNQyxZQUFZLEtBQUtOLEtBQUwsQ0FBV0ssYUFBWCxDQUF5QiwyQkFBekIsQ0FBbEI7QUFDQSxVQUFNRSxjQUFjLEtBQUtQLEtBQUwsQ0FBV0ssYUFBWCxDQUF5Qiw2QkFBekIsQ0FBcEI7QUFDQSxVQUFNRyxjQUFjLEtBQUtSLEtBQUwsQ0FBV0ssYUFBWCxDQUF5Qiw2QkFBekIsQ0FBcEI7QUFDQSxVQUFNSSxJQUFJWixlQUFlYSxnQkFBZixDQUFnQ1gsT0FBaEMsQ0FBVjs7QUFFQSxVQUFJSyxRQUFKLEVBQWM7QUFDWkEsaUJBQVNPLFNBQVQsR0FBcUJGLEVBQUVHLElBQXZCO0FBQ0Q7O0FBRUQsVUFBSU4sU0FBSixFQUFlO0FBQ2JBLGtCQUFVSyxTQUFWLEdBQXNCLE9BQUlGLEVBQUVJLEtBQU4sRUFBY0MsS0FBZCxDQUFvQixDQUFDLENBQXJCLENBQXRCO0FBQ0Q7O0FBRUQsVUFBSVAsV0FBSixFQUFpQjtBQUNmQSxvQkFBWUksU0FBWixHQUF3QixPQUFJRixFQUFFTSxPQUFOLEVBQWdCRCxLQUFoQixDQUFzQixDQUFDLENBQXZCLENBQXhCO0FBQ0Q7O0FBRUQsVUFBSU4sV0FBSixFQUFpQjtBQUNmQSxvQkFBWUcsU0FBWixHQUF3QixPQUFJRixFQUFFTyxPQUFOLEVBQWdCRixLQUFoQixDQUFzQixDQUFDLENBQXZCLENBQXhCO0FBQ0Q7O0FBRUQsVUFBSUwsRUFBRVEsS0FBRixJQUFXLENBQWYsRUFBa0I7QUFDaEIsYUFBS0MsSUFBTDtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7Ozs7OzJCQUtPO0FBQ0xDLG9CQUFjLEtBQUtqQixRQUFuQjtBQUNEOztBQUVEOzs7Ozs7Ozs4QkFLVTtBQUNSLFdBQUtnQixJQUFMO0FBQ0EsV0FBS2xCLEtBQUwsR0FBYSxJQUFiO0FBQ0EsV0FBS0UsUUFBTCxHQUFnQixJQUFoQjtBQUNEOzs7Ozs7QUEzRkdMLGMsQ0FzQkdhLGdCLEdBQW1CLG1CQUFXO0FBQ25DLE1BQU1ELElBQUlXLEtBQUtDLEtBQUwsQ0FBV3RCLE9BQVgsSUFBc0JxQixLQUFLQyxLQUFMLENBQVcsSUFBSUQsSUFBSixFQUFYLENBQWhDO0FBQ0EsTUFBTUosVUFBVU0sS0FBS0MsS0FBTCxDQUFZZCxJQUFJLElBQUwsR0FBYSxFQUF4QixDQUFoQjtBQUNBLE1BQU1NLFVBQVVPLEtBQUtDLEtBQUwsQ0FBWWQsSUFBSSxJQUFKLEdBQVcsRUFBWixHQUFrQixFQUE3QixDQUFoQjtBQUNBLE1BQU1JLFFBQVFTLEtBQUtDLEtBQUwsQ0FBWWQsS0FBSyxPQUFPLEVBQVAsR0FBWSxFQUFqQixDQUFELEdBQXlCLEVBQXBDLENBQWQ7QUFDQSxNQUFNRyxPQUFPVSxLQUFLQyxLQUFMLENBQVdkLEtBQUssT0FBTyxFQUFQLEdBQVksRUFBWixHQUFpQixFQUF0QixDQUFYLENBQWI7O0FBRUEsU0FBTztBQUNMUSxXQUFPUixDQURGO0FBRUxHLFVBQU1BLFFBQVEsQ0FBUixHQUFZLENBQVosR0FBZ0JBLElBRmpCO0FBR0xDLFdBQU9BLFNBQVMsQ0FBVCxHQUFhLENBQWIsR0FBaUJBLEtBSG5CO0FBSUxFLGFBQVNBLFdBQVcsQ0FBWCxHQUFlLENBQWYsR0FBbUJBLE9BSnZCO0FBS0xDLGFBQVNBLFdBQVcsQ0FBWCxHQUFlLENBQWYsR0FBbUJBO0FBTHZCLEdBQVA7QUFPRCxDOztBQTBESCwrREFBZW5CLGNBQWYiLCJmaWxlIjoiLi9zcmMvdXRpbC9Db3VudGRvd25UaW1lci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIENvdW50ZG93blRpbWVyIHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IEhUTUwgRWxlbWVudCB0byBhdHRhY2ggdGhlIHRpbWVyIG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbmRUaW1lIFRoZSBlbmQgdGltZVxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgZW5kVGltZSkge1xuICAgIHRoaXMuY2xvY2sgPSBlbGVtZW50O1xuICAgIHRoaXMudXBkYXRlQ2xvY2soZW5kVGltZSk7XG4gICAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHRoaXMudXBkYXRlQ2xvY2soZW5kVGltZSk7XG4gICAgfSwgMTAwMCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyByZW1haW5pbmcgdGltZSBmcm9tIHRoZSBwcmVzZW50IG1vbWVudCB0byBgZW5kRGF0ZWBcbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge3N0cmluZ30gZW5kVGltZSBUaGUgZW5kIHRpbWVcbiAgICogQHJldHVybnMge3t0b3RhbDogbnVtYmVyLCBkYXlzOiBudW1iZXIsIGhvdXJzOiBudW1iZXIsIG1pbnV0ZXM6IG51bWJlciwgc2Vjb25kczogbnVtYmVyfX0gVG90YWwgdGltZSByZW1haW5pbmdcbiAgICovXG4gIHN0YXRpYyBnZXRSZW1haW5pbmdUaW1lID0gZW5kVGltZSA9PiB7XG4gICAgY29uc3QgdCA9IERhdGUucGFyc2UoZW5kVGltZSkgLSBEYXRlLnBhcnNlKG5ldyBEYXRlKCkpO1xuICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKCh0IC8gMTAwMCkgJSA2MCk7XG4gICAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IoKHQgLyAxMDAwIC8gNjApICUgNjApO1xuICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcigodCAvICgxMDAwICogNjAgKiA2MCkpICUgMjQpO1xuICAgIGNvbnN0IGRheXMgPSBNYXRoLmZsb29yKHQgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdGFsOiB0LFxuICAgICAgZGF5czogZGF5cyA8PSAwID8gMCA6IGRheXMsXG4gICAgICBob3VyczogaG91cnMgPD0gMCA/IDAgOiBob3VycyxcbiAgICAgIG1pbnV0ZXM6IG1pbnV0ZXMgPD0gMCA/IDAgOiBtaW51dGVzLFxuICAgICAgc2Vjb25kczogc2Vjb25kcyA8PSAwID8gMCA6IHNlY29uZHMsXG4gICAgfTtcbiAgfTtcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgSFRNTCBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbmRUaW1lIFRoZSBlbmQgdGltZVxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKi9cbiAgdXBkYXRlQ2xvY2soZW5kVGltZSkge1xuICAgIGNvbnN0IGRheXNTcGFuID0gdGhpcy5jbG9jay5xdWVyeVNlbGVjdG9yKCcuZ3V0ZW5iZWUtY291bnRkb3duLWRheXMnKTtcbiAgICBjb25zdCBob3Vyc1NwYW4gPSB0aGlzLmNsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5ndXRlbmJlZS1jb3VudGRvd24taG91cnMnKTtcbiAgICBjb25zdCBtaW51dGVzU3BhbiA9IHRoaXMuY2xvY2sucXVlcnlTZWxlY3RvcignLmd1dGVuYmVlLWNvdW50ZG93bi1taW51dGVzJyk7XG4gICAgY29uc3Qgc2Vjb25kc1NwYW4gPSB0aGlzLmNsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5ndXRlbmJlZS1jb3VudGRvd24tc2Vjb25kcycpO1xuICAgIGNvbnN0IHQgPSBDb3VudGRvd25UaW1lci5nZXRSZW1haW5pbmdUaW1lKGVuZFRpbWUpO1xuXG4gICAgaWYgKGRheXNTcGFuKSB7XG4gICAgICBkYXlzU3Bhbi5pbm5lckhUTUwgPSB0LmRheXM7XG4gICAgfVxuXG4gICAgaWYgKGhvdXJzU3Bhbikge1xuICAgICAgaG91cnNTcGFuLmlubmVySFRNTCA9IGAwJHt0LmhvdXJzfWAuc2xpY2UoLTIpO1xuICAgIH1cblxuICAgIGlmIChtaW51dGVzU3Bhbikge1xuICAgICAgbWludXRlc1NwYW4uaW5uZXJIVE1MID0gYDAke3QubWludXRlc31gLnNsaWNlKC0yKTtcbiAgICB9XG5cbiAgICBpZiAoc2Vjb25kc1NwYW4pIHtcbiAgICAgIHNlY29uZHNTcGFuLmlubmVySFRNTCA9IGAwJHt0LnNlY29uZHN9YC5zbGljZSgtMik7XG4gICAgfVxuXG4gICAgaWYgKHQudG90YWwgPD0gMCkge1xuICAgICAgdGhpcy5zdG9wKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0b3BzIHRoZSBjb3VudGRvd25cbiAgICpcbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICovXG4gIHN0b3AoKSB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcIkRlc3Ryb3lzXCIgdGhlIGluc3RhbmNlXG4gICAqXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuc3RvcCgpO1xuICAgIHRoaXMuY2xvY2sgPSBudWxsO1xuICAgIHRoaXMuaW50ZXJ2YWwgPSBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvdW50ZG93blRpbWVyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/util/CountdownTimer.js\n");

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function() { module.exports = window[\"jQuery\"]; }());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cC5bbmFtZV0vZXh0ZXJuYWwgXCJqUXVlcnlcIj9jZDBjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUNBQW1DLEVBQUUiLCJmaWxlIjoianF1ZXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCkgeyBtb2R1bGUuZXhwb3J0cyA9IHdpbmRvd1tcImpRdWVyeVwiXTsgfSgpKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///jquery\n");

/***/ })

/******/ });